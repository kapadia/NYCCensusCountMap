{"version":3,"sources":["components/ContactTypeLegend.js","components/BoundarySelector.js","components/Legend.js","components/FacilityCard.js","components/Details.js","Layers.js","hooks/useBoundaryLayers.js","hooks/useFacilitiesLayer.js","hooks/useFacilities.js","pages/MainPage.js","hooks/useMap.js","hooks/useGeoJSONLayer.js","App.js","serviceWorker.js","index.js"],"names":["ContactTypeLegend","className","icon","faCircle","style","color","BoundarySelector","boundaries","selectedBoundary","onSelect","options","Object","entries","map","value","label","datasetName","onChange","a","placeholder","Legend","onSelectBoundary","FacilityCard","facility","console","log","facname","address","boro","city","zipcode","factype","capacity","Details","feature","facilities","useState","showFacilities","setShowFacilities","Fragment","properties","GEOID","onClick","f","TotPopACS17","MRR2010","width","height","data","col","angle","makeLEP","showLabels","labelsRadiusMultiplier","labelsStyle","fontSize","innerRadius","radius","makeInternetData","geojsonLayer","url","process","paintFill","paintLine","censusStrategyLayer","sourceLayer","HTCLayer","useBoundaryLayers","selectedLayer","layers","setLayers","useEffect","current","layerList","on","id","nameCol","nameAlt","layer","forEach","sourceName","layerDeets","source","addSource","type","fillLayer","addLayer","paint","lineLayer","layout","visibility","setLayoutProperty","useFacilitiesLayer","setFacilities","fetch","then","json","useFacilities","MainPage","mapDiv","useRef","setSelectedBoundary","selectedFeature","setSelectedFeature","setHardToCountStats","Papa","parse","download","header","complete","results","mapDivRef","lnglat","zoom","key","mapboxgl","accessToken","Map","container","center","useMap","boundaryLayers","name","source_name","e","features","useGeoJSONLayer","Layers","tractFacilities","censusTractID","useMemo","filter","useCensusTractFacilities","ref","App","basename","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9cac45e9.chunk.js","sourcesContent":["import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faCircle} from '@fortawesome/free-solid-svg-icons';\n\nexport default function ContactTypeLegend() {\n  return (\n    <section className=\"contact-type\">\n      <ul>\n        <li className=\"category-entry\">\n          <FontAwesomeIcon icon={faCircle} style={{color: '#C2A5CF'}} />{' '}\n          Internet First, English\n        </li>\n        <li className=\"category-entry\">\n          <FontAwesomeIcon icon={faCircle} style={{color: '#9970AB'}} />{' '}\n          Internet First, Bilingual\n        </li>\n        <li className=\"category-entry\">\n          <FontAwesomeIcon icon={faCircle} style={{color: '#A6DBA0'}} />{' '}\n          Internet Choice, English\n        </li>\n        <li className=\"category-entry\">\n          <FontAwesomeIcon icon={faCircle} style={{color: '#5AAE61'}} />{' '}\n          Internet Choice, Bilingual\n        </li>\n      </ul>\n    </section>\n  );\n}\n","import React from 'react';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\nexport default function BoundarySelector({\n  boundaries,\n  selectedBoundary,\n  onSelect,\n}) {\n  return (\n    <section className=\"boundary-selector\">\n      <h4>Boundaries</h4>\n\n      {boundaries && (\n        <Dropdown\n          options={Object.entries(boundaries).map(([id, layer]) => ({\n            value: id,\n            label: layer.datasetName,\n          }))}\n          onChange={a => onSelect(a.value)}\n          value={selectedBoundary}\n          placeholder=\"Select a boundary\"\n        />\n      )}\n    </section>\n  );\n}\n","import React from 'react';\nimport ContactTypeLegend from './ContactTypeLegend';\nimport BoundarySelector from './BoundarySelector';\n\nexport default function Legend({\n  selectedBoundary,\n  boundaries,\n  onSelectBoundary,\n}) {\n  return (\n    <div className=\"Legend\">\n      <section className=\"thematic-layer\">\n        <ContactTypeLegend />\n        <BoundarySelector\n          selectedBoundary={selectedBoundary}\n          onSelect={onSelectBoundary}\n          boundaries={boundaries}\n        />\n      </section>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function FacilityCard({facility}) {\n  console.log('facilty', facility);\n  return (\n    <div className=\"card facility\">\n      <h3>{facility.facname}</h3>\n      <p>\n        {facility.address} <br /> {facility.boro} <br /> {facility.city} <br />{' '}\n        {facility.zipcode}\n      </p>\n      <p>{facility.factype} </p>\n      <p>Capacity: {facility.capacity ? facility.capacity : 'Unknown'}</p>\n    </div>\n  );\n}\n","import React, {useState} from 'react';\nimport {RadialChart} from 'react-vis';\nimport FacilityCard from './FacilityCard';\n\nexport default function Details({feature, facilities}) {\n  console.log(feature);\n\n  const [showFacilities, setShowFacilities] = useState(false);\n\n  const makeInternetData = feature => {\n    const cols = [\n      'NoInternet',\n      'Internet_NoSub',\n      'Internet',\n      'DialUpOnly',\n      'Broadband_Any',\n      'Cellular',\n      'CellularOnly',\n      'Broadband_CableFiberOpticDSL',\n      'Broadband_CableFiberOpticDSLOnly',\n      'Satellite',\n      'SatelliteOnly',\n      'OtherOnly',\n    ];\n    const data = cols.map(col => ({\n      angle: feature.properties[col],\n      label: col,\n    }));\n    return data;\n  };\n\n  const makeLEP = feature => {\n    const cols = [\n      'LEPHHs',\n      'LEPspanHHs',\n      'LEPindoeurHHs',\n      'LEPapacHHs',\n      'LEPotherHHs',\n    ];\n    const data = cols.map(col => ({\n      angle: feature.properties[col],\n      label: col,\n    }));\n    return data;\n  };\n\n  return (\n    <div className=\"feature\">\n      {feature ? (\n        <React.Fragment>\n          <div className=\"details-header\">\n            <h2>Census Tract: {feature.properties.GEOID}</h2>\n            <p>\n              <span\n                onClick={() => setShowFacilities(false)}\n                className={!showFacilities ? 'selected' : ''}>\n                Stats\n              </span>{' '}\n              /{' '}\n              <span\n                onClick={() => setShowFacilities(true)}\n                className={showFacilities ? 'selected' : ''}>\n                Facilities\n              </span>\n            </p>\n          </div>\n          <div className=\"cards\">\n            {showFacilities ? (\n              facilities.map(f => <FacilityCard facility={f} />)\n            ) : (\n              <React.Fragment>\n                <div className=\"card basic\">\n                  <h3>Basic Info</h3>\n                  <p>Population {feature.properties.TotPopACS17}</p>\n                  <p>Mail return rate 2010 :{feature.properties.MRR2010}%</p>\n                </div>\n                <div className=\"card demographics\">\n                  <h3>Demographics</h3>\n                </div>\n                <div className=\"card english_proficency\">\n                  <h3>English Proficency</h3>\n                  <RadialChart\n                    width={200}\n                    height={200}\n                    data={makeLEP(feature)}\n                    showLabels\n                    labelsRadiusMultiplier={1.1}\n                    labelsStyle={{\n                      fontSize: 12,\n                    }}\n                    innerRadius={80}\n                    radius={100}\n                  />\n                </div>\n                <div className=\"card internet\">\n                  <h3>Internet</h3>\n                  <RadialChart\n                    width={200}\n                    height={200}\n                    data={makeInternetData(feature)}\n                    showLabels\n                    labelsRadiusMultiplier={1.1}\n                    innerRadius={80}\n                    radius={100}\n                    labelsStyle={{\n                      fontSize: 12,\n                    }}\n                  />\n                </div>\n              </React.Fragment>\n            )}\n          </div>\n        </React.Fragment>\n      ) : (\n        <h2>Click to see details of feature</h2>\n      )}\n    </div>\n  );\n}\n","export default {\n  geojsonLayer: {\n    url: `${process.env.PUBLIC_URL}/CensusTractsAllVariables.geojson`,\n    paintFill: {\n      'fill-color': [\n        'match',\n        ['get', 'strategy_code'],\n        0,\n        '#C2A5CF',\n        1,\n        '#9970AB',\n        2,\n        '#A6DBA0',\n        3,\n        '#5AAE61',\n        'grey',\n      ],\n      'fill-opacity': 0.7,\n    },\n    paintLine: {\n      'line-color': 'lightgrey',\n    },\n  },\n  censusStrategyLayer: {\n    url:\n      'https://gis-server.data.census.gov/arcgis/rest/services/Hosted/Mail_Strategy_VectorTile/VectorTileServer/tile/{z}/{y}/{x}.pbf',\n    sourceLayer: 'Mail Strategy',\n    paintFill: {\n      'fill-color': [\n        'match',\n        ['get', '_symbol'],\n        0,\n        '#C2A5CF',\n        1,\n        '#9970AB',\n        2,\n        '#A6DBA0',\n        3,\n        '#5AAE61',\n        'grey',\n      ],\n    },\n    paintLine: {\n      'line-color': 'lightgrey',\n      'line-width': 0.2,\n    },\n  },\n\n  HTCLayer: {\n    url:\n      'https://b.tiles.mapbox.com/v4/cunycur.9zkm964v/{z}/{x}/{y}.vector.pbf?access_token=pk.eyJ1IjoiY3VueWN1ciIsImEiOiJfQmNSMF9NIn0.uRgbcFeJbw2xyTUZY8gYeA',\n    sourceLayer: 'Tract2017wgs84_HTConly-c1gvdq',\n    paintFill: {\n      'fill-color': 'red',\n    },\n    paintLine: {\n      'line-color': 'lightgrey',\n      'line-width': 0.2,\n    },\n  },\n};\n\nexport function BoundaryLayers() {\n  const layer_list = [\n    {\n      id: 'cd',\n      datasetName: 'Community Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/yfnk-k7r4?method=export&format=Shapefile',\n      nameCol: 'boro_cd',\n      nameAlt: null,\n    },\n    {\n      id: 'pp',\n      datasetName: 'Police Precincts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/78dh-3ptz?method=export&format=Shapefile',\n      nameCol: 'precinct',\n      nameAlt: null,\n    },\n    {\n      id: 'sd',\n      datasetName: 'School Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/r8nu-ymqj?method=export&format=Shapefile',\n      nameCol: 'district',\n      nameAlt: 'districtco',\n    },\n    {\n      id: 'hc',\n      datasetName: 'Health Center Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/b55q-34ps?method=export&format=Shapefile',\n      nameCol: 'hcent_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'cc',\n      datasetName: 'City Council Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/yusd-j4xi?method=export&format=Shapefile',\n      nameCol: 'coun_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'nycongress',\n      datasetName: 'Congressional Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/qd3c-zuu7?method=export&format=Shapefile',\n      nameCol: 'cong_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'sa',\n      datasetName: 'State Assembly Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/pf5b-73bw?method=export&format=Shapefile',\n      nameCol: 'assem_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'ss',\n      datasetName: 'State Senate Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/h4i2-acfi?method=export&format=Shapefile',\n      nameCol: 'st_sen_dis',\n      nameAlt: null,\n    },\n    {\n      id: 'nta',\n      datasetName: 'Neighborhood Tabulation Area',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/cpf4-rkhq?method=export&format=Shapefile',\n      nameCol: 'ntaname',\n      nameAlt: 'ntacode',\n    },\n    {\n      id: 'bid',\n      datasetName: 'Business Improvement District',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/ejxk-d93y?method=export&format=Shapefile',\n      nameCol: 'bid',\n      nameAlt: null,\n    },\n    /*{\n      id: 'zipcode',\n      datasetName: 'Zip Code',\n      url: 'http://data.cityofnewyork.us/download/i8iw-xf4u/application%2Fzip',\n      nameCol: 'ZIPCODE',\n      nameAlt: null,\n},*/\n  ];\n\n  return layer_list.map(layer => ({\n    ...layer,\n    paintLine: {\n      'line-color': 'black',\n    },\n  }));\n}\n","import React, {useEffect, useState, useRef} from 'react';\nimport {BoundaryLayers} from '../Layers';\n\nexport default function useBoundaryLayers(map, selectedLayer) {\n  const [layers, setLayers] = useState({});\n\n  useEffect(() => {\n    if (map.current) {\n      let layerList = {};\n      map.current.on('load', () => {\n        console.log('adding boundary layers');\n        const boundaryLayers = BoundaryLayers();\n        boundaryLayers.forEach(layer => {\n          const sourceName = `${layer.id}_source`;\n\n          let layerDeets = {...layer};\n          console.log('adding source ', sourceName);\n          layerDeets.source = map.current.addSource(sourceName, {\n            type: 'geojson',\n            data: `${process.env.PUBLIC_URL}/boundaries/${layer.id}.geojson`,\n          });\n\n          if (layer.paintFill) {\n            layerDeets.fillLayer = map.current.addLayer(\n              {\n                id: `${layer.id}-fill`,\n                type: 'fill',\n                source: sourceName,\n                paint: layer.paintFill,\n              },\n              'waterway-label',\n            );\n          }\n          if (layer.paintLine) {\n            layerDeets.lineLayer = map.current.addLayer(\n              {\n                id: `${layer.id}-line`,\n                type: 'line',\n                source: sourceName,\n                paint: layer.paintLine,\n                layout: {\n                  visibility: selectedLayer == layer.id ? 'visible' : 'none',\n                },\n              },\n              'waterway-label',\n            );\n          }\n          layerList[layer.id] = layerDeets;\n        });\n        setLayers(layerList);\n      });\n    }\n  }, [map]);\n\n  useEffect(() => {\n    if (map.current) {\n      Object.entries(layers).forEach(([id, layer]) => {\n        map.current.setLayoutProperty(\n          `${layer.id}-line`,\n          'visibility',\n          id == selectedLayer ? 'visible' : 'none',\n        );\n      });\n    }\n  }, [map, selectedLayer]);\n  return layers;\n}\n","import React, {useEffect} from 'react';\nimport useFacilities from './useFacilities';\n\nexport default function useFacilitiesLayer(map) {\n  const facilities = useFacilities();\n\n  useEffect(() => {\n    console.log('Map ', map, ' Facilities ', facilities);\n    if (map.current && facilities) {\n      map.current.on('load', () => {\n        map.current.addLayer({\n          id: 'facilites',\n          type: 'symbol',\n          source: {\n            type: 'geojson',\n            data: facilities,\n          },\n          layout: {\n            'icon-image': 'harbor_icon',\n            'text-field': ['get', 'facname'],\n            'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n            'text-offset': [0, 0.6],\n            'text-anchor': 'top',\n          },\n        });\n      });\n    }\n  }, [map, facilities]);\n  return facilities;\n}\n","import React, {useEffect, useState, useMemo} from 'react';\n\nexport default function useFacilities() {\n  const [facilities, setFacilities] = useState(null);\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/facilities.geojson`)\n      .then(a => a.json())\n      .then(a => setFacilities(a));\n  }, []);\n  return facilities;\n}\n\nexport function useCensusTractFacilities(censusTractID, facilities) {\n  return useMemo(() => {\n    return censusTractID\n      ? facilities.features\n          .filter(facility => facility.properties.GEOID == censusTractID)\n          .map(f => f.properties)\n      : [];\n  }, [censusTractID, facilities]);\n}\n","import React, {useRef, useState, useEffect} from 'react';\nimport {useMap} from '../hooks/useMap';\nimport Legend from '../components/Legend';\nimport Details from '../components/Details';\nimport Papa from 'papaparse';\nimport {useMVTLayer} from '../hooks/useMVTLayer';\nimport {useGeoJSONLayer} from '../hooks/useGeoJSONLayer';\nimport useBoundaryLayers from '../hooks/useBoundaryLayers';\nimport useFacilitiesLayer from '../hooks/useFacilitiesLayer';\nimport {useCensusTractFacilities} from '../hooks/useFacilities';\nimport Layers from '../Layers';\n\nexport default function MainPage() {\n  const mapDiv = useRef(null);\n  const [selectedBoundary, setSelectedBoundary] = useState('cd');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [hardToCountStats, setHardToCountStats] = useState([]);\n\n  useEffect(() => {\n    Papa.parse('/hard_to_count_NY.csv', {\n      download: true,\n      header: true,\n      complete: function(results) {\n        setHardToCountStats(results);\n      },\n    });\n  }, []);\n\n  const map = useMap(mapDiv, {\n    lnglat: [-73.9920330193022, 40.75078660435196],\n    zoom: 10,\n    style: 'mapbox://styles/mapbox/light-v10',\n    key:\n      'pk.eyJ1Ijoic3R1YXJ0LWx5bm4iLCJhIjoiM2Q4ODllNmRkZDQ4Yzc3NTBhN2UyNDE0MWY2OTRiZWIifQ.8OEKvgZBCCtDFUXkjt66Pw',\n  });\n\n  //  const stategyLayer = useMVTLayer(map, Layers.censusStrategyLayer);\n\n  //  const HTCLayer = useMVTLayer(map, Layers.HTCLayer);\n  const GeojsonLayer = useGeoJSONLayer(map, 'HTC', {\n    ...Layers.geojsonLayer,\n    onClick: feature => setSelectedFeature(feature),\n  });\n\n  // BoundaryLayers().forEach(layer => {\n  const boundaryLayers = useBoundaryLayers(map, selectedBoundary);\n\n  const facilities = useFacilitiesLayer(map);\n  console.log('sf ', selectedFeature);\n  console.log(\n    'selected id ',\n    selectedFeature ? selectedFeature.properties.GEOID : null,\n  );\n  console.log(facilities);\n  const tractFacilities = useCensusTractFacilities(\n    selectedFeature ? selectedFeature.properties.GEOID : null,\n    facilities,\n  );\n  console.log('tract facilities ', tractFacilities);\n  return (\n    <div className=\"main-page\">\n      <div className=\"map\" ref={mapDiv} />\n      <div className=\"details\">\n        <Details facilities={tractFacilities} feature={selectedFeature} />{' '}\n      </div>\n      <Legend\n        boundaries={boundaryLayers}\n        selectedBoundary={selectedBoundary}\n        onSelectBoundary={setSelectedBoundary}\n      />\n    </div>\n  );\n}\n","import {useState, useRef, useEffect, useCallback} from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nexport function useMap(mapDivRef, {lnglat, zoom, style, key}) {\n  mapboxgl.accessToken = key;\n  const map = useRef(null);\n  useEffect(() => {\n    map.current = new mapboxgl.Map({\n      container: mapDivRef.current, // container id\n      style: style, // stylesheet location\n      center: lnglat, // starting position [lng, lat]\n      zoom: zoom, // starting zoom\n    });\n  }, [mapDivRef]);\n\n  return map;\n}\n","import {useEffect, useRef} from 'react';\n\nexport function useGeoJSONLayer(\n  map,\n  name,\n  {url, paintFill, paintLine, sourceLayer, onClick},\n) {\n  const fillLayer = useRef(null);\n  const lineLayer = useRef(null);\n  const source = useRef(null);\n  const source_name = `${name}_source`;\n  useEffect(() => {\n    if (map.current) {\n      map.current.on('load', () => {\n        source.current = map.current.addSource(source_name, {\n          type: 'geojson',\n          data: url,\n        });\n\n        if (paintFill) {\n          fillLayer.current = map.current.addLayer(\n            {\n              id: `${name}-fill`,\n              type: 'fill',\n              source: source_name,\n              paint: paintFill,\n            },\n            'waterway-label',\n          );\n        }\n        if (paintLine) {\n          lineLayer.current = map.current.addLayer(\n            {\n              id: `${name}-line`,\n              type: 'line',\n              source: source_name,\n              paint: paintLine,\n            },\n            'waterway-label',\n          );\n        }\n        map.current.on('click', `${name}-fill`, e => {\n          console.log(e.features[0]);\n          if (onClick) {\n            onClick(e.features[0]);\n          }\n        });\n      });\n    }\n  }, [map]);\n  return {fillLayer, source};\n}\n","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport MainPage from './pages/MainPage';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Route path=\"/\" component={MainPage} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}