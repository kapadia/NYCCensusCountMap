{"version":3,"sources":["components/RangeLegend.js","components/CategoryLegend.js","components/BoundarySelector.js","components/FacilitiesSelector.js","components/HelpTab.js","components/InfoTab.js","components/Legend.js","colors.js","components/PieCard.js","components/FactCard.js","components/AssetCategoryCard.js","components/DetailsSelector.js","hooks/useFacilities.js","components/Details.js","Layers.js","hooks/useFacilitiesLayer.js","pages/MainPage.js","hooks/useMap.js","hooks/useGeoJSONLayer.js","hooks/useBoundaryLayers.js","App.js","serviceWorker.js","index.js"],"names":["RangeLegend","name","min","max","colStart","colEnd","gradient","console","log","className","style","background","CategoryLegend","categories","map","category","backgroundColor","color","BoundarySelector","boundaries","selectedBoundary","onSelect","options","Object","entries","value","label","datasetName","onChange","a","placeholder","FacilitiesSection","title","selected","useState","expanded","setExpanded","onClick","icon","faAngleDown","faAngleRight","option","type","checked","includes","FacilitiesSelector","onSelected","section","HelpTab","href","listStyleType","classNmae","Legend","onSelectBoundary","onSelectMetric","showFacilities","onShowFacilitiesChange","metric","selectedFacilityTypes","onSelectFacilityType","tab","setTab","faLayerGroup","faInfoCircle","faQuestionCircle","colors","reverse","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","radius","index","x","Math","cos","RADIAN","y","sin","fill","textAnchor","dominantBaseline","toFixed","PI","PieCard","data","colData","d","i","width","height","labelLine","isAnimationActive","entry","FactCard","facts","fact","AssetCategoryCard","assets","src","process","asset","address","boro","city","zipcode","join","DetailsSelector","isSelected","useFacilities","facilities","setFacilities","useEffect","fetch","then","json","Details","feature","layer","onSelectFacility","tract","facilityTypes","showBoundaryData","setShowBoundaryData","selectedDetails","setSelectedDetails","id","types","layerIDs","cd","tracts","cc","sd","nta","useMemo","features","filter","facility","properties","length","asset_type","f","useFilteredFacilities","geoid","featureName","nat","NOCCs","senate_districts","police_precints","congress_districts","displayFeature","GEOID","Fragment","fontWeight","floor","total_population","toLocaleString","htc_pop","MRR2010","strategy_code","contactStrategy","detail","race_white","race_total","race_black","race_asian","race_hispanic","race_other","makeDemographicData","foreign_born_native","foreign_born_foreign","makeForeignData","age_less_5","age_6_15","age_16_64","age_64_over","makeAgeData","norm","english_english","english_asian","english_spanish","english_european","english_other","makeEnglishData","internet_no_access","internet_subscription","internet_no_subscription","makeInternetData","own_vs_rent_rent","own_vs_rent_owner","makeRenting","fillStyles","strategy","blackPop","asianPop","latinxPop","noInternetPC","englishProficency","under5","returnCount","HTCLayer","url","paintFill","paintLine","BoundaryLayers","polygons","labels","nameCol","nameAlt","useFacilitiesLayer","visible","current","on","Promise","all","img","resolve","reject","loadImage","error","res","addImage","loadAllImages","addLayer","source","layout","visibility","paint","loaded","setFilter","setLayoutProperty","MainPage","mapDiv","useRef","setSelectedBoundary","selectedTract","setSelectedTract","selectedFeature","setSelectedFeature","setHardToCountStats","setShowFacilities","setSelectedFacilityTypes","setMetric","Papa","parse","download","header","complete","results","mapDivRef","lnglat","zoom","key","mapboxgl","accessToken","Map","container","center","addControl","MapboxGeocoder","ScaleControl","NavigationControl","useMap","searchBox","Layers","boundaryLayers","sourceLayer","selection","fillLayer","lineLayer","source_name","oldSelectionID","addSource","e","setFeatureState","setPaintProperty","useGeoJSONLayer","selectedLayer","selectedVar","onSelectLayer","selectedGeomID","layers","setLayers","layerList","forEach","sourceName","layerDeets","sourceLabels","labelLayer","useBoundaryLayers","boundary","ref","t","App","basename","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d4cdd01.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function RangeLegend({name, min, max, colStart, colEnd}) {\n  const gradient = `linear-gradient(90deg, ${colStart} 0%, ${colEnd} 100%)`;\n\n  console.log('gradient is ', gradient);\n  return (\n    <div className=\"range-legend\">\n      <div\n        className=\"range-legend-bar\"\n        style={{\n          background: gradient,\n        }}\n      />\n      <div className=\"range-legend-labels\">\n        <p>{min}</p> <p>{max}</p>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faCircle} from '@fortawesome/free-solid-svg-icons';\n\nexport default function CategoryLegend({categories}) {\n  return (\n    <section className=\"category-layer\">\n      <ul>\n        {categories.map(category => (\n          <li className=\"category-entry\">\n            <div\n              className=\"category-marker\"\n              style={{backgroundColor: category.color}}\n            />\n            {category.name}\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n}\n","import React from 'react';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\nexport default function BoundarySelector({\n  boundaries,\n  selectedBoundary,\n  onSelect,\n}) {\n  const options = Object.entries(boundaries).map(([id, layer]) => ({\n    value: id,\n    label: layer.datasetName,\n  }));\n  return (\n    <section className=\"boundary-selector\">\n      <h3>Boundaries</h3>\n\n      {boundaries && (\n        <Dropdown\n          options={[{value: 'tracts', label: 'Census Tracts'}, ...options]}\n          onChange={a => onSelect(a.value)}\n          value={selectedBoundary}\n          placeholder=\"Select a boundary\"\n        />\n      )}\n    </section>\n  );\n}\n","import React, {useState} from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faAngleRight, faAngleDown} from '@fortawesome/free-solid-svg-icons';\n\nfunction FacilitiesSection({title, options, selected, onSelect}) {\n  const [expanded, setExpanded] = useState(false);\n\n  return (\n    <section>\n      <h4 onClick={() => setExpanded(!expanded)}>\n        <FontAwesomeIcon icon={expanded ? faAngleDown : faAngleRight} /> {title}\n      </h4>\n      {expanded && (\n        <ul>\n          {options.map(option => (\n            <li className=\"facilities-option\">\n              <input\n                type=\"checkbox\"\n                checked={selected.includes(option)}\n                onChange={() => onSelect(option)}\n              />\n              {option}\n            </li>\n          ))}\n        </ul>\n      )}\n    </section>\n  );\n}\n\nexport default function FacilitiesSelector({selected, onSelected}) {\n  const sections = [\n    {\n      title: 'Educational Assets',\n      options: [\n        'Head Start and Early Head Start',\n        'Universal Pre-K',\n        'K-12 (NYC Public Schools)',\n        'Community Schools',\n        'Public Libraries',\n      ],\n    },\n\n    {\n      title: 'Services and Programs',\n      options: [\n        'Shelters',\n        'Food Kitchens and Pantries',\n        'Senior Centers',\n        'Mental Health Services',\n        'Hospitals and Rehab Centers',\n        'LGBTQ Centers and Services',\n        'NYCHA Developments',\n      ],\n    },\n\n    {\n      title: 'Neighborhood Institutions',\n      options: [\n        'Community-Based Organizations',\n        'Faith-Based Organizations',\n        \"Community Centers and YMCA's\",\n      ],\n    },\n  ];\n  const [expanded, setExpanded] = useState({\n    'Education Assets': false,\n  });\n  return (\n    <div className=\"facilities-selector\">\n      <h3>Community Assets</h3>\n      {sections.map(section => (\n        <FacilitiesSection\n          title={section.title}\n          options={section.options}\n          selected={selected}\n          onSelect={option => onSelected(option)}\n        />\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function HelpTab() {\n  return (\n    <div className=\"help-tab\">\n      <section>\n        <h3>About</h3>\n        <p>\n          This interactive map was created by Hester Street, in partnership with\n          Stuart Lynn.\n        </p>\n        <p>\n          This work is possible thanks to the support of the NYC Census 2020 and\n          CUNY Complete Count Fund.\n        </p>\n\n        <p>\n          If you have any additional assets, services or neighborhood\n          institutions to contribute to the map, please send to{' '}\n          <a href=\"mailto:devin@hesterstreet.org\">devin@hesterstreet.org</a>{' '}\n          with the subject line “New interactive map asset”. Be sure to include\n          the following information for each asset:\n        </p>\n        <ul style={{listStyleType: 'circle'}}>\n          <li>Name </li>\n          <li>Address</li>\n          <li>Layer it should be added to</li>\n        </ul>\n      </section>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function HelpTab() {\n  return (\n    <div className=\"help-tab\">\n      <section>\n        <h3>Info</h3>\n        <h3>Context Layers</h3>\n        <p>\n          The base context layers for the map are supplied by OpenStreetMap>\n        </p>\n      </section>\n      <section>\n        <h3>Asset Layers</h3>\n        <h4>Educational Assets </h4>\n\n        <p>\n          These layers identify the location of educational facilities. Children\n          are a historically undercounted community; it will be important to\n          reach parents at Head Start, Early Head Start, Universal Pre-K, K-12\n          (NYC Public Schools), and Community Schools. Other assets include\n          public libraries, which can be hubs for engaging the wider community.\n          These layers do not include a comprehensive list of charter,\n          parochial, or private schools.\n        </p>\n        <p className=\"source\">\n          Sources:{' '}\n          <a href=\"https://data.cityofnewyork.us/City-Government/Facilities-Database-Shapefile/2fpa-bnsx\">\n            Department of City Planning. (2019). City Planning Facilities\n            Database.\n          </a>\n        </p>\n\n        <h4>Services and Programs</h4>\n\n        <p>\n          These layers identify various locations where New Yorkers access\n          services, assistance or programs. The assets in this list can help you\n          engage a range of historically undercounted communities, like\n          low-income individuals, people experiencing homelessness, people that\n          live with mental or physical disabilities, people who do not live in\n          traditional housing and LGBTQ individuals. These layers do not include\n          all services and programs serving these populations. If we are missing\n          any important services in your community, please let us know by\n          emailing{' '}\n          <a href=\"mainto:devin@hesterstreet.org\">devin@hesterstreet.org</a>\n        </p>\n        <p className=\"sources\">\n          Sources:{' '}\n          <a href=\"https://data.cityofnewyork.us/City-Government/Facilities-Database-Shapefile/2fpa-bnsx\">\n            Department of City Planning. (2019). City Planning Facilities\n            Database\n          </a>\n          .\n          <a href=\"https://gaycenter.org/recovery-health/health/lgbthealth-network/#networkmembers\">\n            The Lesbian, Gay, Bisexual and Transgender Community Center. (2019).\n            LGBTQ Health and Human Services Network Members.\n          </a>\n          <a\n            href=\"https://nycopendata.socrata.com/Health/Mental-Health-Service-Finder-Data/8nqg-ia7v\n\">\n            Office of the Mayor. (2018). NYC Mental Health Service Finder Data.\n          </a>\n        </p>\n\n        <h4>Neighborhood Institutions</h4>\n        <p>\n          These layers identify institutions where residents gather, like\n          faith-based organizations, community centers and community-based\n          organizations. These neighborhood institutions can become your\n          partners for Census efforts. These layers do not include a\n          comprehensive list of all institutions serving your neighborhood\n          populations. If we are missing any important institutions in your\n          community, please let us know by emailing devin@hesterstreet.org\n        </p>\n\n        <p>\n          Sources:{' '}\n          <a href=\"https://data.cityofnewyork.us/City-Government/Facilities-Database-Shapefile/2fpa-bnsx\">\n            Department of City Planning. (2019). City Planning Facilities\n            Database.{' '}\n          </a>\n          United Way of New York City, New York Immigration Coalition, and\n          Hester Street Partner databases in NYC.\n        </p>\n      </section>\n      <section>\n        <h3>Census 2020 Info Layers</h3>\n\n        <h4>Mail Contact Strategy</h4>\n\n        <p>\n          This dataset shows how US Census Bureau’s plan to contact each\n          household in the United States. Understanding your target areas Mail\n          Contact Strategy will help you spread the word to your community about\n          how they can self-respond to the Census. In the case of New York City,\n          the forms of contact include four methods divided into two categories:\n          Internet First and Internet Choice.\n        </p>\n\n        <p>\n          Internet First (marked as purple on the map) are areas that are more\n          likely to respond first online. These households will receive an\n          invitation to complete the census online. Areas marked in dark purple\n          will be sent an invitation in English, while areas marked in light\n          purple will be sent an invitation in both English and Spanish.\n        </p>\n\n        <p>\n          Internet Choice (marked as green on the map) are areas that are less\n          likely to respond online. These households will receive a paper\n          questionnaire, along with an invitation to complete the census online\n          or by phone. Areas marked in dark green will be sent an invitation in\n          English, while areas marked in light green will be sent an invitation\n          in both English and Spanish.\n        </p>\n        <p className=\"sources\">\n          Source: NYC Census 2020 Early NRFU Early NRFU stands for “Early\n          Non-Response Follow Up”. Non-Response Follow Up is a contact method\n          the Census Bureau uses to collect information for those households who\n          have not self-responded to the Census. During the NRFU period, Census\n          enumerators will visit households and administer the questionnaire.\n          “Early NRFU” areas will receive enumerators on April 9th, so the\n          Census can capture college and university students who live in\n          off-campus housing before the end of the spring semester when they may\n          leave for another residence. Source: NYC Census 2020 2010 Mail Return\n          Rate The 2010 Mail return rate is the percentage of households who\n          self-responded to the Census in 2010. Self-response is the more\n          accurate way for every New Yorker to be counted, so the return rate\n          allows us to identify areas that have been undercounted in the past\n          and are at risk of being undercounted again during the 2020 Census. We\n          call this areas “historically undercounted communities” or\n          “Hard-to-Count areas”. The NYC Census 2020 Team plans to push the\n          City’s Self-Response rate from 62% to the national average of 76% or\n          higher. Source:U.S. Census Bureau. (2012). 2012 Planning Database.\n        </p>\n      </section>\n      <section>\n        <h3>Boundary Layers</h3>\n\n        <p>\n          New York City has many geographic boundaries; all used by different\n          groups for different purposes. Depending on your needs, using a\n          specific boundary can help you better understand your target\n          population.\n        </p>\n        <p>\n          We want to note that the “NOCC Neighborhoods” boundary slightly\n          differs from actual boundaries for the neighborhoods of NYC. This\n          layer specifically pertains to NOCC leaders for the NYC Census effort\n          and their defined neighborhood boundaries.\n        </p>\n        <p className=\"sources\">\n          Sources: NYC Census 2020 NYC Open Data 2018 US Census Bureau 2018\n        </p>\n      </section>\n      <section>\n        <h3>Demographic Layers</h3>\n        <p>\n          We included data on the demographics of individuals who are considered\n          undercounted populations. These layers can help you better hone in on\n          your target populations. For example, comparing race to internet\n          access can show where areas of NYC have no internet in relation to\n          which racial group lies primarily in those areas).\n        </p>\n\n        <p>\n          For Internet Access: Limited Internet refers to those with cellular\n          data plans and Internet access without a subscription. Internet\n          subscription includes any kind of broadband access, fiber optic, DSL\n          and/or satellite subscriptions. Internet Access is an extremely\n          important dataset because the US Census Bureau is not mailing\n          questionnaires to 80% of national households, and will be requesting\n          households to fill out the Census online or over the phone. You can\n          view where certain areas will and will not receive paper\n          questionnaires by turning on the Mail Contact Strategies layers under\n          Important Layers.\n        </p>\n        <p classNmae=\"sources\">\n          Source: US Census Bureau, American Community Survey 5-Year Data 2018\n        </p>\n      </section>\n    </div>\n  );\n}\n","import React, {useState} from 'react';\nimport ContactTypeLegend from './ContactTypeLegend';\nimport RangeLegend from './RangeLegend';\nimport CategoryLegend from './CategoryLegend';\nimport BoundarySelector from './BoundarySelector';\nimport FacilitiesSelector from './FacilitiesSelector';\nimport HelpTab from './HelpTab';\nimport InfoTab from './InfoTab';\n\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {\n  faInfoCircle,\n  faLayerGroup,\n  faQuestionCircle,\n  faList,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\nexport default function Legend({\n  selectedBoundary,\n  boundaries,\n  onSelectBoundary,\n  showFacilities,\n  onShowFacilitiesChange,\n  onSelectMetric,\n  metric,\n  selectedFacilityTypes,\n  onSelectFacilityType,\n}) {\n  const [tab, setTab] = useState('layers');\n  console.log('Tab is ', tab);\n  return (\n    <div className=\"Legend overlay\">\n      <div className=\"tabs\">\n        <div\n          className={tab === 'layers' ? 'selected' : ''}\n          onClick={() => setTab('layers')}>\n          <FontAwesomeIcon icon={faLayerGroup} />\n        </div>\n        <div\n          className={tab === 'info' ? 'selected' : ''}\n          onClick={() => setTab('info')}>\n          <FontAwesomeIcon icon={faInfoCircle} />\n        </div>\n        <div\n          className={tab === 'questions' ? 'selected' : ''}\n          onClick={() => setTab('questions')}>\n          <FontAwesomeIcon icon={faQuestionCircle} />\n        </div>\n      </div>\n      <div className=\"content\">\n        {tab === 'layers' && (\n          <section className=\"thematic-layer\">\n            <h3>Neighborhood Information</h3>\n            <Dropdown\n              options={[\n                {value: 'strategy', label: 'Mail Strategy'},\n                {value: 'returnCount', label: '2010 Mail Return Rate'},\n                {value: 'blackPop', label: '% Black'},\n                {value: 'latinxPop', label: '% Latinx'},\n                {value: 'asianPop', label: '% Asian'},\n                {value: 'noInternetPC', label: '% No Internet'},\n                {value: 'englishProficency', label: '% English Proficiency'},\n                {value: 'under5', label: '% under 5'},\n              ]}\n              onChange={a => onSelectMetric(a.value)}\n              value={metric}\n              placeholder=\"Select a metric\"\n            />\n            {metric === 'strategy' && (\n              <CategoryLegend\n                categories={[\n                  {color: '#C2A5CF', name: 'Internet First, English'},\n                  {color: '#9970AB', name: 'Internet First, Bilingual'},\n                  {color: '#A6DBA0', name: 'Internet Choice, English'},\n                  {color: '#5AAE61', name: 'Internet Choice, Bilingual'},\n                ]}\n              />\n            )}\n            {metric === 'returnCount' && (\n              <CategoryLegend\n                categories={[\n                  {color: '#b95356', name: '0 - 60%'},\n                  {color: '#ee5658', name: '60 - 65%'},\n                  {color: '#ecbaa8', name: '65 - 70%'},\n                  {color: '#f9bd53', name: '70 - 73%'},\n                  {color: 'rgba(0,0,0,0)', name: 'Not hard to count'},\n                ]}\n              />\n            )}\n            {metric === 'asianPop' && (\n              <RangeLegend\n                name={'% Asian'}\n                min={'0%'}\n                max={'100%'}\n                colStart={'#FFFFFF'}\n                colEnd={'#4682b4'}\n              />\n            )}\n            {metric === 'blackPop' && (\n              <RangeLegend\n                name={'% Black'}\n                min={'0%'}\n                max={'100%'}\n                colStart={'#FFFFFF'}\n                colEnd={'#4682b4'}\n              />\n            )}\n            {metric === 'latinxPop' && (\n              <RangeLegend\n                name={'% Latinx'}\n                min={'0%'}\n                max={'100%'}\n                colStart={'#FFFFFF'}\n                colEnd={'#4682b4'}\n              />\n            )}\n            {metric === 'noInternetPC' && (\n              <RangeLegend\n                name={'% No Internet'}\n                min={'0%'}\n                max={'100%'}\n                colStart={'#FFFFFF'}\n                colEnd={'#4682b4'}\n              />\n            )}\n            {metric === 'englishProficency' && (\n              <RangeLegend\n                name={'% Proficent in English'}\n                min={'0%'}\n                max={'100%'}\n                colStart={'#FFFFFF'}\n                colEnd={'#4682b4'}\n              />\n            )}\n            {metric === 'under5' && (\n              <RangeLegend\n                name={'% under 5 years old'}\n                min={'0%'}\n                max={'10%'}\n                colStart={'#FFFFFF'}\n                colEnd={'#4682b4'}\n              />\n            )}\n            <BoundarySelector\n              selectedBoundary={selectedBoundary}\n              onSelect={onSelectBoundary}\n              boundaries={boundaries}\n            />\n            <FacilitiesSelector\n              selected={selectedFacilityTypes}\n              onSelected={onSelectFacilityType}\n            />\n          </section>\n        )}\n\n        {tab === 'info' && <InfoTab />}\n        {tab === 'questions' && <HelpTab />}\n      </div>\n    </div>\n  );\n}\n","export const colors = [\n  '#000000',\n  '#cf0621',\n  '#8f1158',\n  '#b93f22',\n  '#faaf12',\n].reverse();\n","import React from 'react';\nimport {colors} from '../colors';\nimport {PieChart, Pie, Sector, Cell} from 'recharts';\n\nconst renderCustomizedLabel = ({\n  cx,\n  cy,\n  midAngle,\n  innerRadius,\n  outerRadius,\n  percent,\n  index,\n}) => {\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n  if (percent < 4 / 100) {\n    return '';\n  }\n  return (\n    <text\n      x={x}\n      y={y}\n      fill=\"white\"\n      textAnchor={x > cx ? 'start' : 'end'}\n      dominantBaseline=\"central\">\n      {`${(percent * 100).toFixed(0)}%`}\n    </text>\n  );\n};\n\nconst RADIAN = Math.PI / 180;\nexport default function PieCard({data, title}) {\n  const colData = data.map((d, i) => ({...d, color: colors[i % 5]}));\n  return (\n    <div className=\"pie-card\">\n      <h2>{title}</h2>\n      <div className=\"pie-card-content\">\n        <PieChart width={165} height={165} data={colData}>\n          <Pie\n            data={colData}\n            cx={80}\n            cy={80}\n            labelLine={false}\n            label={renderCustomizedLabel}\n            outerRadius={80}\n            isAnimationActive={false}\n            fill=\"#8884d8\">\n            {colData.map((entry, index) => (\n              <Cell fill={entry.color} />\n            ))}\n          </Pie>\n        </PieChart>\n        <ul className=\"labels\">\n          {colData.map((entry, index) => (\n            <li className=\"label\">\n              <span className=\"bar\" style={{backgroundColor: colors[index]}} />\n              <span className=\"label-text\">{entry.name}</span>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function FactCard({title, facts}) {\n  return (\n    <div className=\"card fact\">\n      <h2>{title}</h2>\n      {facts.map(fact => (\n        <p className=\"fact-name\">\n          <span className=\"fact-value\">{fact.value}</span>{' '}\n          <span className=\"fact-text\">{fact.name}</span>\n        </p>\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function AssetCategoryCard({assets, title}) {\n  const icons = {\n    'Hospitals and Rehab Centers': 'Dot_Hospitals.png',\n    'Faith-Based Organizations': 'Dot_FBO.png',\n    'City Wide Community Schools': 'Dot_CommunitySchools.png',\n    'LGBTQ Centers and Services': 'Dot_LGBTQ.png',\n    'Food Kitchens and Pantries': 'Dot_FoodKitchens.png',\n    'Senior Centers': 'Dot_SeniorCenters.png',\n    'Universal Pre-K': 'Dot_UniPreK.png',\n    'K-12 (NYC Public Schools)': 'Dot_K12.png',\n    'Community Schools': 'Dot_CommunityCenters.png',\n    'Mental Health Services': 'Dot_MentalHealth.png',\n    'Community-Based Organizations': 'Dot_CBO.png',\n    'Public Libraries': 'Dot_Libraries.png',\n  };\n  return (\n    <div className=\"asset-card\">\n      <h2>\n        <img src={`${process.env.PUBLIC_URL}/imgs/${icons[title]}`} />\n        {title}\n      </h2>\n      <ul>\n        {assets.map(asset => (\n          <li className=\"asset\">\n            <h3>{asset.name}</h3>\n            <p>\n              {[asset.address, asset.boro, asset.city, asset.zipcode].join(',')}\n            </p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function DetailsSelector({selected, onSelect}) {\n  const isSelected = name => (name === selected ? 'selected' : '');\n  return (\n    <div className=\"details-selector\">\n      <ul>\n        <li\n          onClick={() => onSelect('demographics')}\n          className={isSelected('demographics')}>\n          Demographics\n        </li>\n        <li\n          onClick={() => onSelect('housing')}\n          className={isSelected('housing')}>\n          Housing and Economics\n        </li>\n        <li onClick={() => onSelect('assets')} className={isSelected('assets')}>\n          Assets\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import React, {useEffect, useState, useMemo} from 'react';\n\nexport default function useFacilities() {\n  const [facilities, setFacilities] = useState(null);\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/facilities.geojson`)\n      .then(a => a.json())\n      .then(a => setFacilities(a));\n  }, []);\n  return facilities;\n}\n\nexport function useFilteredFacilities(id, layer, types) {\n  const facilities = useFacilities();\n  const layerIDs = {\n    cd: 'community_district_id',\n    tracts: 'census_tract_id',\n    cc: 'city_council_district_id',\n    sd: 'school_district_id',\n    nta: 'nta_id',\n  };\n  return useMemo(() => {\n    return id\n      ? facilities.features\n          .filter(facility => facility.properties[layerIDs[layer]] == id)\n          .filter(facility =>\n            types && types.length > 0\n              ? types.includes(facility.properties.asset_type)\n              : true,\n          )\n          .map(f => f.properties)\n      : [];\n  }, [id, facilities, layer, types]);\n}\n","import React, {useState} from 'react';\nimport {RadialChart} from 'react-vis';\nimport FacilityCard from './FacilityCard';\nimport SimpleBarChart from './SimpleBarChart';\nimport PieCard from './PieCard';\nimport FactCard from './FactCard';\nimport AssetCategoryCard from './AssetCategoryCard';\nimport DetailsSelector from './DetailsSelector';\nimport {useFilteredFacilities} from '../hooks/useFacilities';\n\nexport default function Details({\n  feature,\n  onSelectFacility,\n  layer,\n  tract,\n  facilityTypes,\n}) {\n  const [showFacilities, setShowFacilities] = useState(false);\n  const [showBoundaryData, setShowBoundaryData] = useState(true);\n\n  const [selectedDetails, setSelectedDetails] = useState('demographics');\n  const facilities = useFilteredFacilities(\n    feature ? feature.properties.geoid : null,\n    layer,\n    facilityTypes,\n  );\n\n  const makeRenting = feature => {\n    const properties = feature.properties;\n    return [\n      {name: 'Reting', value: properties.own_vs_rent_rent},\n      {name: 'Owned', value: properties.own_vs_rent_owner},\n    ];\n  };\n\n  const featureNames = {\n    tracts: 'Census Tract',\n    cd: 'Community District',\n    sd: 'School District',\n    cc: 'City Council District',\n    nat: 'Neighborhood Tablulation Area',\n    NOCCs: 'NOCC',\n    senate_districts: 'Senate District',\n    police_precints: 'Police Precinct',\n    congress_districts: 'Congress Assembly District',\n  };\n  const featureName = featureNames[layer];\n  const displayFeature =\n    showBoundaryData && layer !== 'tracts'\n      ? feature\n      : tract && {\n          ...tract,\n          properties: {...tract.properties, geoid: tract.properties.GEOID},\n        };\n  const makeAgeData = feature => {\n    const properties = feature.properties;\n    const data = [\n      {\n        name: '5 years or younger',\n        value: properties.age_less_5,\n      },\n      {\n        name: '6 yrs - 15 yrs',\n        value: properties.age_6_15,\n      },\n      {\n        name: '16 yrs - 64 yrs',\n        value: properties.age_16_64,\n      },\n      {\n        name: '65 yrs or older',\n        value: properties.age_64_over,\n      },\n    ];\n    return data;\n  };\n  const makeForeignData = feature => {\n    const properties = feature.properties;\n    return [\n      {name: 'Native Born', value: properties.foreign_born_native},\n      {name: 'Foreign Born', value: properties.foreign_born_foreign},\n    ];\n  };\n  const makeEnglishData = feature => {\n    const properties = feature.properties;\n\n    return [\n      {name: 'English', value: properties.english_english},\n      {name: 'Asian Languages', value: properties.english_asian},\n      {name: 'Spanish', value: properties.english_spanish},\n      {name: 'European Languages', value: properties.english_european},\n      {name: 'Other', value: properties.english_other},\n    ];\n  };\n  const makeInternetData = feature => {\n    const properties = feature.properties;\n    const data = [\n      {name: 'No Internet', value: properties.internet_no_access},\n      {\n        name: 'Full Subscription',\n        value: properties.internet_subscription,\n      },\n      {\n        name: 'Limited Subscription',\n        value: properties.internet_no_subscription,\n      },\n    ];\n    console.log(properties);\n    return data;\n  };\n  const contactStrategy = feature => {\n    switch (feature.strategy_code) {\n      case 0:\n        return 'Internet First, English';\n      case 1:\n        return 'Internet First, Bilingual';\n      case 2:\n        return 'Internet Choice, English';\n      case 3:\n        return 'Internet Choice, Bilingual';\n    }\n  };\n  const makeDemographicData = feature => {\n    return [\n      {\n        name: 'white',\n        value: feature.properties.race_white / feature.properties.race_total,\n      },\n      {\n        name: 'black',\n        value: feature.properties.race_black / feature.properties.race_total,\n      },\n      {\n        name: 'asian',\n        value: feature.properties.race_asian / feature.properties.race_total,\n      },\n      {\n        name: 'latinx',\n        value: feature.properties.race_hispanic / feature.properties.race_total,\n      },\n      {\n        name: 'other',\n        value: feature.properties.race_other / feature.properties.race_total,\n      },\n    ];\n  };\n\n  const makeLEP = feature => {\n    const cols = [\n      'LEPHHs',\n      'LEPspanHHs',\n      'LEPindoeurHHs',\n      'LEPapacHHs',\n      'LEPotherHHs',\n    ];\n    const data = cols.map(col => ({\n      value: feature.properties[col],\n      title: col,\n    }));\n    return data;\n  };\n\n  return displayFeature ? (\n    <React.Fragment>\n      <div className=\"overview\">\n        <h2>\n          {feature && (\n            <span\n              style={{fontWeight: showBoundaryData ? 700 : 400}}\n              onClick={() => setShowBoundaryData(true)}>\n              {featureName}: {feature.properties.geoid}\n            </span>\n          )}\n          {tract && (\n            <span\n              style={{fontWeight: !showBoundaryData ? 700 : 400}}\n              onClick={() => setShowBoundaryData(false)}>\n              Census Tract: {tract.properties.GEOID}\n            </span>\n          )}\n        </h2>\n        {displayFeature && (\n          <p>\n            Population:{' '}\n            <span style={{color: 'red'}}>\n              {Math.floor(\n                displayFeature.properties.total_population,\n              ).toLocaleString()}\n            </span>\n          </p>\n        )}\n        {showBoundaryData && feature ? (\n          <>\n            <p>\n              Population in HTC areas:{' '}\n              <span style={{color: 'red'}}>\n                {Math.floor(\n                  (feature.properties.htc_pop * 100.0) /\n                    feature.properties.total_population,\n                ).toLocaleString()}\n                %\n              </span>\n            </p>\n          </>\n        ) : (\n          tract && (\n            <>\n              <p>\n                Mail return rate 2010:{' '}\n                <span style={{color: 'red'}}>{tract.properties.MRR2010}%</span>\n              </p>\n              <p>\n                Inital Contact Strategy:\n                <span style={{color: 'red'}}>\n                  {contactStrategy(tract.properties)}\n                </span>\n              </p>\n            </>\n          )\n        )}\n      </div>\n      <div className=\"selector-cards\">\n        <DetailsSelector\n          selected={selectedDetails}\n          onSelect={detail => setSelectedDetails(detail)}\n        />\n        {displayFeature && (\n          <div className=\"cards\">\n            {selectedDetails === 'demographics' && (\n              <>\n                <div className=\"card demographics\">\n                  <PieCard\n                    title=\"Race\"\n                    data={makeDemographicData(displayFeature)}\n                  />\n                </div>\n                <FactCard\n                  title={''}\n                  facts={[\n                    {\n                      name: 'identify as Latinx',\n                      value:\n                        Math.floor(\n                          (displayFeature.properties.race_hispanic * 100.0) /\n                            displayFeature.properties.race_total,\n                        ).toLocaleString() + '%',\n                    },\n                    {\n                      name: 'identify as Black',\n                      value:\n                        Math.floor(\n                          (displayFeature.properties.race_black * 100.0) /\n                            displayFeature.properties.race_total,\n                        ).toLocaleString() + '%',\n                    },\n                  ]}\n                />\n                <div className=\"card foreign\">\n                  <PieCard\n                    title=\"Foreign Born\"\n                    data={makeForeignData(displayFeature)}\n                  />\n                </div>\n                <div className=\"card age\">\n                  <PieCard\n                    title=\"Age\"\n                    data={makeAgeData(displayFeature)}\n                    norm={true}\n                  />\n                </div>\n                <FactCard\n                  title={''}\n                  facts={[\n                    {\n                      name: 'children under 5 years old',\n                      value: Math.floor(\n                        displayFeature.properties.age_less_5,\n                      ).toLocaleString(),\n                    },\n                  ]}\n                />\n                <div className=\"card english_proficency\">\n                  <PieCard\n                    title=\"English Proficency\"\n                    data={makeEnglishData(displayFeature)}\n                    norm={true}\n                  />\n                </div>\n              </>\n            )}\n            {selectedDetails === 'housing' && (\n              <>\n                <div className=\"card internet\">\n                  <PieCard\n                    title=\"Internet Access\"\n                    data={makeInternetData(displayFeature)}\n                    norm={true}\n                    style={{width: '500px'}}\n                  />\n                </div>\n                <FactCard\n                  facts={[\n                    {\n                      name: 'have no internet access',\n                      value: Math.floor(\n                        displayFeature.properties.internet_no_access,\n                      ).toLocaleString(),\n                    },\n                  ]}\n                />\n                <div className=\"card housing\">\n                  <PieCard title=\"Renting\" data={makeRenting(displayFeature)} />\n                </div>\n              </>\n            )}\n            {selectedDetails === 'assets' && (\n              <>\n                {facilityTypes && facilityTypes.length > 0 ? (\n                  facilityTypes.map(type => (\n                    <AssetCategoryCard\n                      title={type}\n                      assets={facilities.filter(f => f.asset_type === type)}\n                    />\n                  ))\n                ) : (\n                  <h2>Turn on some Community Assets to view here</h2>\n                )}\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </React.Fragment>\n  ) : (\n    <div className=\"placeholder\">\n      <h2>Click {featureName} for details</h2>\n    </div>\n  );\n}\n","export const fillStyles = {\n  strategy: [\n    'match',\n    ['get', 'strategy_code'],\n    0,\n    '#C2A5CF',\n    1,\n    '#9970AB',\n    2,\n    '#A6DBA0',\n    3,\n    '#5AAE61',\n    'grey',\n  ],\n  blackPop: [\n    'interpolate-lab',\n    ['linear'],\n    ['/', ['get', 'race_black'], ['get', 'race_total']],\n    0.0,\n    '#FFFFFF',\n    1.0,\n    '#4682b4',\n  ],\n  asianPop: [\n    'interpolate-lab',\n    ['linear'],\n    ['/', ['get', 'race_asian'], ['get', 'race_total']],\n    0.0,\n    '#FFFFFF',\n    1.0,\n    '#4682b4',\n  ],\n  latinxPop: [\n    'interpolate-lab',\n    ['linear'],\n    ['/', ['get', 'race_hispanic'], ['get', 'race_total']],\n    0.0,\n    '#FFFFFF',\n    1.0,\n    '#4682b4',\n  ],\n  noInternetPC: [\n    'interpolate-lab',\n    ['linear'],\n    ['/', ['get', 'internet_no_access'], ['get', 'internet_total']],\n    0.0,\n    '#FFFFFF',\n    1.0,\n    '#4682b4',\n  ],\n  englishProficency: [\n    'interpolate-lab',\n    ['linear'],\n    ['/', ['get', 'english_english'], ['get', 'english_total_households']],\n    0.0,\n    '#FFFFFF',\n    1.0,\n    '#4682b4',\n  ],\n  under5: [\n    'interpolate-lab',\n    ['linear'],\n    ['/', ['get', 'age_less_5'], ['get', 'age_total']],\n    0.0,\n    '#FFFFFF',\n    0.1,\n    '#4682b4',\n  ],\n  returnCount: [\n    'step',\n    ['get', 'MRR2010'],\n    '#b95356',\n    60,\n    '#ee5658',\n    65,\n    '#ecbaa8',\n    70,\n    '#f9bd53',\n    73,\n    ['rgba', 0, 0, 0, 0],\n  ],\n};\n\nexport default {\n  HTCLayer: {\n    //url: `${process.env.PUBLIC_URL}/CensusTractsAllVariables.geojson`,\n    url: `${process.env.PUBLIC_URL}/census_tracts.geojson`,\n    paintFill: {\n      'fill-color': 'grey',\n      'fill-opacity': 0.7,\n    },\n    paintLine: {\n      'line-color': [\n        'case',\n        ['boolean', ['coalesce', ['feature-state', 'selected'], false], true],\n        'red',\n        'white',\n      ],\n      'line-width': [\n        'case',\n        ['boolean', ['coalesce', ['feature-state', 'selected'], false], true],\n        3,\n        1,\n      ],\n    },\n  },\n};\n\nexport function BoundaryLayers() {\n  const layer_list = [\n    {\n      id: 'cd',\n      datasetName: 'Community Districts',\n      polygons: 'community_districts_vars.geojson',\n      labels: 'communty_district_labels.geojson',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/yfnk-k7r4?method=export&format=Shapefile',\n      nameCol: 'boro_cd',\n      nameAlt: null,\n    },\n    {\n      id: 'sd',\n      datasetName: 'School Districts',\n      polygons: 'school_districts_with_vars.geojson',\n      labels: 'school_district_labels.geojson',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/r8nu-ymqj?method=export&format=Shapefile',\n      nameCol: 'district',\n      nameAlt: 'districtco',\n    },\n    {\n      id: 'cc',\n      datasetName: 'City Council Districts',\n      polygons: 'city_council_district_with_vars.geojson',\n      labels: 'city_council_district_labels.geojson',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/yusd-j4xi?method=export&format=Shapefile',\n      nameCol: 'coun_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'congress_districts',\n      datasetName: 'Congress Assembly Districts',\n      polygons: 'congress_assembly_with_vars.geojson',\n      labels: 'congress_assembly_district_labels.geojson',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/yusd-j4xi?method=export&format=Shapefile',\n      nameCol: 'geoid',\n      nameAlt: null,\n    },\n    {\n      id: 'senate_districts',\n      datasetName: 'Senate Districts',\n      polygons: 'senate_districts_with_vars.geojson',\n      labels: 'senate_districts_with_vars.geojson',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/yusd-j4xi?method=export&format=Shapefile',\n      nameCol: 'st_sen_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'police_precincts',\n      datasetName: 'Police Precincts',\n      polygons: 'police_precincts_with_vars.geojson',\n      labels: 'police_precincts_labels.geojson',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/yusd-j4xi?method=export&format=Shapefile',\n      nameCol: 'geoid',\n      nameAlt: null,\n    },\n    {\n      id: 'NOCCs',\n      datasetName: 'NOCCS',\n      polygons: 'noccs_with_vars.geojson',\n      labels: 'noccs_labels.geojson',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/cpf4-rkhq?method=export&format=Shapefile',\n      nameCol: 'ntaname',\n      nameAlt: 'ntacode',\n    },\n    /*{\n      id: 'pp',\n      datasetName: 'Police Precincts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/78dh-3ptz?method=export&format=Shapefile',\n      nameCol: 'precinct',\n      nameAlt: null,\n    },\n    {\n      id: 'hc',\n      datasetName: 'Health Center Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/b55q-34ps?method=export&format=Shapefile',\n      nameCol: 'hcent_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'nycongress',\n      datasetName: 'Congressional Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/qd3c-zuu7?method=export&format=Shapefile',\n      nameCol: 'cong_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'sa',\n      datasetName: 'State Assembly Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/pf5b-73bw?method=export&format=Shapefile',\n      nameCol: 'assem_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'ss',\n      datasetName: 'State Senate Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/h4i2-acfi?method=export&format=Shapefile',\n      nameCol: 'st_sen_dis',\n      nameAlt: null,\n    },\n    {\n      id: 'bid',\n      datasetName: 'Business Improvement District',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/ejxk-d93y?method=export&format=Shapefile',\n      nameCol: 'bid',\n      nameAlt: null,\n    },\n    /*{\n      id: 'zipcode',\n      datasetName: 'Zip Code',\n      url: 'http://data.cityofnewyork.us/download/i8iw-xf4u/application%2Fzip',\n      nameCol: 'ZIPCODE',\n      nameAlt: null,\n},*/\n  ];\n\n  return layer_list.map(layer => ({\n    ...layer,\n    paintLine: {\n      'line-color': 'black',\n    },\n  }));\n}\n","import React, {useEffect} from 'react';\nimport useFacilities from './useFacilities';\n\nfunction loadAllImages(map) {\n  const images = [\n    'Dot_Hospitals.png',\n    'Dot_FBO.png',\n    'Dot_CommunitySchools.png',\n    'Dot_LGBTQ.png',\n    'Dot_FoodKitchens.png',\n    'Dot_SeniorCenters.png',\n    'Dot_UniPreK.png',\n    'Dot_K12.png',\n    'Dot_CommunityCenters.png',\n    'Dot_MentalHealth.png',\n    'Dot_CBO.png',\n    'Dot_Libraries.png',\n  ];\n  return Promise.all(\n    images.map(\n      img =>\n        new Promise((resolve, reject) => {\n          map.loadImage(`${process.env.PUBLIC_URL}/imgs/${img}`, function(\n            error,\n            res,\n          ) {\n            map.addImage(img, res);\n            resolve();\n          });\n        }),\n    ),\n  );\n}\n\nexport default function useFacilitiesLayer(map, visible, types) {\n  const facilities = useFacilities();\n\n  useEffect(() => {\n    if (map.current && facilities) {\n      map.current.on('load', () => {\n        loadAllImages(map.current).then(() => {\n          map.current.addLayer({\n            id: 'facilities',\n            type: 'symbol',\n            source: {\n              type: 'geojson',\n              data: facilities,\n            },\n            layout: {\n              'icon-image': ['get', 'icon'],\n              'icon-size': 0.02,\n              'text-field': ['get', 'name'],\n              'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n              'text-offset': [0, 0.6],\n              'text-size': 10,\n              'text-anchor': 'top',\n              //'icon-allow-overlap': true,\n              //              'text-allow-overlap': true,\n              visibility: visible ? 'visible' : 'none',\n            },\n            //    filter: ['match', ['get', 'asset_type'], types, true, false],\n\n            paint: {\n              'text-color': 'rgba(255,255,255,1)',\n            },\n          });\n        });\n      });\n    }\n  }, [map, facilities]);\n\n  useEffect(() => {\n    if (map.current && map.current.loaded()) {\n      console.log('setting filter');\n      map.current.setFilter('facilities', [\n        'in',\n        ['get', 'asset-type'],\n        ['literal', types],\n      ]);\n    }\n  }, [types, map]);\n\n  useEffect(() => {\n    if (map.current && map.current.loaded()) {\n      console.log('Toggling visible on facilities');\n      map.current.setLayoutProperty(\n        `facilities`,\n        'visibility',\n        visible ? 'visible' : 'none',\n      );\n    }\n  }, [map, visible]);\n\n  return facilities;\n}\n","import React, {useRef, useState, useEffect, useCallback} from 'react';\nimport {useMap} from '../hooks/useMap';\nimport Legend from '../components/Legend';\nimport Details from '../components/Details';\nimport Papa from 'papaparse';\nimport {useGeoJSONLayer} from '../hooks/useGeoJSONLayer';\nimport useBoundaryLayers from '../hooks/useBoundaryLayers';\nimport useFacilitiesLayer from '../hooks/useFacilitiesLayer';\nimport Layers, {fillStyles} from '../Layers';\n\nexport default function MainPage() {\n  const mapDiv = useRef(null);\n  const [selectedBoundary, setSelectedBoundary] = useState('cd');\n  const [selectedTract, setSelectedTract] = useState(null);\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [hardToCountStats, setHardToCountStats] = useState([]);\n  const [showFacilities, setShowFacilities] = useState(true);\n  const [selectedFacilityTypes, setSelectedFacilityTypes] = useState([\n    'Food Kitchens and Pantries',\n  ]);\n  const [metric, setMetric] = useState('strategy');\n\n  useEffect(() => {\n    Papa.parse('/hard_to_count_NY.csv', {\n      download: true,\n      header: true,\n      complete: function(results) {\n        setHardToCountStats(results);\n      },\n    });\n  }, []);\n\n  const onToggleFacilityType = type => {\n    selectedFacilityTypes.includes(type)\n      ? setSelectedFacilityTypes(selectedFacilityTypes.filter(t => t !== type))\n      : setSelectedFacilityTypes([...selectedFacilityTypes, type]);\n  };\n\n  const map = useMap(mapDiv, {\n    lnglat: [-73.9920330193022, 40.75078660435196],\n    zoom: 10,\n    style: 'mapbox://styles/mapbox/light-v10',\n    key:\n      'pk.eyJ1Ijoic3R1YXJ0LWx5bm4iLCJhIjoiM2Q4ODllNmRkZDQ4Yzc3NTBhN2UyNDE0MWY2OTRiZWIifQ.8OEKvgZBCCtDFUXkjt66Pw',\n  });\n\n  const searchBox = useRef(null);\n\n  useEffect(() => {\n    setSelectedFeature(null);\n  }, [selectedBoundary]);\n\n  const style = {\n    ...Layers.HTCLayer,\n    ...{paintFill: {'fill-color': fillStyles[metric], 'fill-opacity': 0.7}},\n  };\n\n  const GeojsonLayer = useGeoJSONLayer(map, 'HTC', {\n    ...style,\n    onClick: setSelectedTract,\n    selection: selectedTract,\n    visible: selectedBoundary === 'tracts',\n  });\n\n  // BoundaryLayers().forEach(layer => {\n  const boundaryLayers = useBoundaryLayers(\n    map,\n    selectedBoundary,\n    null,\n    selectedBoundary,\n    selectedFeature ? selectedFeature.id : null,\n    boundary => {\n      setSelectedTract(null);\n      setSelectedFeature(boundary);\n    },\n  );\n\n  const facilities = useFacilitiesLayer(\n    map,\n    showFacilities,\n    selectedFacilityTypes,\n  );\n  return (\n    <div className=\"main-page\">\n      <div className=\"map\" ref={mapDiv} />\n      <div className=\"info overlay\">\n        <h2>NYC CENSUS 2020 INTERACTIVE MAP</h2>\n        <h3>Created by Stuart Lynn: Hosted/designed Hester Street</h3>\n        <p>\n          This interactive map helps communities across New York City to learn\n          more about their neighborhoods and the Census 2020 process. If you are\n          creating an outreach strategy to get your neighborhood counted, this\n          tool can help! We have included information about historically\n          undercounted communities, common barriers to completing the Census,\n          and Census Bureau strategy. You can also map neighborhood institutions\n          serving undercounted populations that you may want to contact and\n          partner with. For more information on the map and how to submit data\n          for your neighborhood, please view the Help tab.\n        </p>\n        <div ref={searchBox} />\n      </div>\n      <div className=\"details overlay\">\n        <Details\n          feature={selectedFeature}\n          tract={selectedTract}\n          layer={selectedBoundary}\n          facilityTypes={selectedFacilityTypes}\n        />{' '}\n      </div>\n      <Legend\n        boundaries={boundaryLayers}\n        selectedBoundary={selectedBoundary}\n        onSelectBoundary={setSelectedBoundary}\n        showFacilities={showFacilities}\n        onShowFacilitiesChange={setShowFacilities}\n        selectedFacilityTypes={selectedFacilityTypes}\n        onSelectFacilityType={onToggleFacilityType}\n        metric={metric}\n        onSelectMetric={setMetric}\n      />\n    </div>\n  );\n}\n","import {useState, useRef, useEffect, useCallback} from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport '@mapbox/mapbox-gl-geocoder/lib/mapbox-gl-geocoder.css';\nimport style from '../map_style';\n\nexport function useMap(mapDivRef, {lnglat, zoom, key}) {\n  const [mapLoaded, setMapLoaded] = useState(false);\n  mapboxgl.accessToken = key;\n  const map = useRef(null);\n  useEffect(() => {\n    map.current = new mapboxgl.Map({\n      container: mapDivRef.current, // container id\n      style: style, // stylesheet location\n      center: lnglat, // starting position [lng, lat]\n      zoom: zoom, // starting zoom\n    });\n    map.current.addControl(\n      new MapboxGeocoder({\n        accessToken: mapboxgl.accessToken,\n        mapboxgl: mapboxgl,\n      }),\n    );\n    map.current.addControl(new mapboxgl.ScaleControl(), 'top-right');\n    map.current.addControl(new mapboxgl.NavigationControl());\n  }, [mapDivRef]);\n\n  return map;\n}\n","import {useEffect, useRef} from 'react';\n\nexport function useGeoJSONLayer(\n  map,\n  name,\n  {url, paintFill, paintLine, sourceLayer, onClick, selection, visible},\n) {\n  const fillLayer = useRef(null);\n  const lineLayer = useRef(null);\n  const source = useRef(null);\n  const source_name = `${name}_source`;\n  const oldSelectionID = useRef(null);\n  useEffect(() => {\n    if (map.current) {\n      map.current.on('load', () => {\n        source.current = map.current.addSource(source_name, {\n          type: 'geojson',\n          data: url,\n        });\n\n        if (paintFill) {\n          fillLayer.current = map.current.addLayer({\n            id: `${name}-fill`,\n            type: 'fill',\n            source: source_name,\n            paint: paintFill,\n            layout: {\n              visibility: 'visible', // visible ? 'visible' : 'none',\n            },\n          });\n        }\n        if (paintLine) {\n          lineLayer.current = map.current.addLayer({\n            id: `${name}-line`,\n            type: 'line',\n            source: source_name,\n            paint: paintLine,\n            layout: {\n              visibility: 'visible', // visible ? 'visible' : 'none',\n            },\n          });\n        }\n        map.current.on('click', `${name}-fill`, e => {\n          console.log(e.features[0]);\n          if (onClick) {\n            onClick(e.features[0]);\n          }\n        });\n      });\n    }\n  }, [map]);\n\n  useEffect(() => {\n    if (map.current && selection) {\n      if (oldSelectionID.current) {\n        map.current.setFeatureState(\n          {source: source_name, id: oldSelectionID.current},\n          {selected: false},\n        );\n      }\n\n      map.current.setFeatureState(\n        {source: source_name, id: selection.id},\n        {selected: true},\n      );\n      oldSelectionID.current = selection.id;\n    }\n  }, [selection]);\n\n  /*  useEffect(() => {\n    if (map.current && map.current.loaded()) {\n      map.current.setLayoutProperty(\n        `${name}-fill`,\n        'visibility',\n        visible ? 'visible' : 'none',\n      );\n      map.current.setLayoutProperty(\n        `${name}-line`,\n        'visibility',\n        visible ? 'visible' : 'none',\n      );\n    }\n  }, [map, visible]);\n*/\n  useEffect(() => {\n    if (map.current && map.current.loaded()) {\n      console.log(\n        'setting fill color to be ',\n        paintFill['fill-color'],\n        paintFill,\n      );\n      map.current.setPaintProperty(\n        `${name}-fill`,\n        'fill-color',\n        paintFill['fill-color'],\n      );\n    }\n  }, [paintFill]);\n  return {fillLayer, source};\n}\n","import React, {useEffect, useState, useRef} from 'react';\nimport {BoundaryLayers} from '../Layers';\n\nexport default function useBoundaryLayers(\n  map,\n  selectedLayer,\n  selectedVar,\n  onSelectLayer,\n  selectedGeomID,\n  onClick,\n) {\n  const [layers, setLayers] = useState({});\n  const oldSelectionID = useRef(null);\n\n  useEffect(() => {\n    if (map.current) {\n      let layerList = {};\n      map.current.on('load', () => {\n        const boundaryLayers = BoundaryLayers();\n        boundaryLayers.forEach(layer => {\n          const sourceName = `${layer.id}_source`;\n\n          let layerDeets = {...layer};\n          layerDeets.source = map.current.addSource(sourceName, {\n            type: 'geojson',\n            data: `${process.env.PUBLIC_URL}/boundaries/${layer.polygons}`,\n          });\n\n          layerDeets.sourceLabels = map.current.addSource(\n            sourceName + '_labels',\n            {\n              type: 'geojson',\n              data: `${process.env.PUBLIC_URL}/boundaries/${layer.labels}`,\n            },\n          );\n\n          layerDeets.fillLayer = map.current.addLayer({\n            id: `${layer.id}-fill`,\n            type: 'fill',\n            source: sourceName,\n            paint: {\n              'fill-color': 'grey',\n              'fill-opacity': [\n                'case',\n                [\n                  'boolean',\n                  ['coalesce', ['feature-state', 'selected'], false],\n                  true,\n                ],\n                0,\n                0.7,\n              ],\n            },\n            layout: {\n              visibility: selectedLayer == layer.id ? 'visible' : 'none',\n            },\n          });\n\n          if (layer.paintLine) {\n            layerDeets.lineLayer = map.current.addLayer({\n              id: `${layer.id}-line`,\n              type: 'line',\n              source: sourceName,\n              paint: {\n                'line-color': [\n                  'case',\n                  [\n                    'boolean',\n                    ['coalesce', ['feature-state', 'selected'], false],\n                    true,\n                  ],\n                  'red',\n                  'black',\n                ],\n              },\n              layout: {\n                visibility: selectedLayer == layer.id ? 'visible' : 'none',\n              },\n            });\n          }\n\n          layerDeets.labelLayer = map.current.addLayer({\n            id: `${layer.id}-labels`,\n            type: 'symbol',\n            source: sourceName + '_labels',\n            layout: {\n              visibility: selectedLayer == layer.id ? 'visible' : 'none',\n              'text-field': ['get', 'geoid'],\n              'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n              'text-offset': [0, 0.0],\n              'text-size': 15,\n              'text-anchor': 'top',\n              'text-allow-overlap': true,\n            },\n          });\n          layerList[layer.id] = layerDeets;\n        });\n        setLayers(layerList);\n      });\n    }\n  }, [map]);\n\n  useEffect(() => {\n    if (map.current) {\n      Object.entries(layers).forEach(([id, layer]) => {\n        map.current.setFeatureState(\n          {source: layer.id + '_source', id: oldSelectionID.current},\n          {selected: false},\n        );\n        map.current.setLayoutProperty(\n          `${layer.id}-line`,\n          'visibility',\n          id == selectedLayer ? 'visible' : 'none',\n        );\n        map.current.setLayoutProperty(\n          `${layer.id}-labels`,\n          'visibility',\n          id == selectedLayer ? 'visible' : 'none',\n        );\n        map.current.setLayoutProperty(\n          `${layer.id}-fill`,\n          'visibility',\n          id == selectedLayer ? 'visible' : 'none',\n        );\n      });\n    }\n  }, [map, selectedLayer]);\n\n  useEffect(() => {\n    const source_name = `${selectedLayer}_source`;\n\n    if (map.current && selectedGeomID) {\n      if (oldSelectionID.current) {\n        map.current.setFeatureState(\n          {source: source_name, id: oldSelectionID.current},\n          {selected: false},\n        );\n      }\n\n      map.current.setFeatureState(\n        {source: source_name, id: selectedGeomID},\n        {selected: true},\n      );\n      oldSelectionID.current = selectedGeomID;\n    }\n  }, [selectedGeomID, selectedLayer, map]);\n\n  useEffect(() => {\n    if (map.current) {\n      const boundaryLayers = BoundaryLayers();\n      boundaryLayers.forEach(layer => {\n        map.current.on('click', `${layer.id}-fill`, e => {\n          if (onClick) {\n            onClick(e.features[0], layer.id);\n          }\n        });\n      });\n    }\n  }, [map]);\n  return layers;\n}\n","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport MainPage from './pages/MainPage';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Route path=\"/\" component={MainPage} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}