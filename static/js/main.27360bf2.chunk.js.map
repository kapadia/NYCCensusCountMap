{"version":3,"sources":["components/ContactTypeLegend.js","components/RangeLegend.js","components/BoundarySelector.js","components/HelpTab.js","components/Legend.js","colors.js","components/PieCard.js","components/AssetCategoryCard.js","components/Details.js","Layers.js","hooks/useBoundaryLayers.js","hooks/useFacilitiesLayer.js","hooks/useFacilities.js","pages/MainPage.js","hooks/useMap.js","hooks/useGeoJSONLayer.js","App.js","serviceWorker.js","index.js"],"names":["ContactTypeLegend","className","icon","faCircle","style","color","RangeLegend","name","min","max","colStart","colEnd","gradient","console","log","background","BoundarySelector","boundaries","selectedBoundary","onSelect","options","Object","entries","map","value","label","datasetName","onChange","a","placeholder","HelpTab","Legend","onSelectBoundary","showFacilities","onShowFacilitiesChange","onSelectMetric","metric","useState","tab","setTab","onClick","faLayerGroup","faList","faInfoCircle","faQuestionCircle","type","checked","e","target","colors","reverse","PieCard","data","title","colData","d","i","width","height","viewBoxSize","entry","index","backgroundColor","AssetCategoryCard","assets","asset","facname","address","boro","city","zipcode","join","Details","feature","facilities","onSelectFacility","Fragment","properties","GEOID","TotPopACS17","MRR2010","strategy_code","contactStrategy","WhiteAloneOrCombo","BlackAloneOrCombo","AsianAloneOrCombo","Hispanic","col","makeLEP","norm","makeInternetData","fillStyles","strategy","returnCount","HTCLayer","url","process","paintFill","paintLine","useBoundaryLayers","selectedLayer","layers","setLayers","useEffect","current","layerList","on","id","nameCol","nameAlt","layer","forEach","sourceName","layerDeets","source","addSource","fillLayer","addLayer","paint","lineLayer","layout","visibility","setLayoutProperty","useFacilitiesLayer","visible","setFacilities","fetch","then","json","useFacilities","loadImage","error","image","addImage","loaded","MainPage","mapDiv","useRef","setSelectedBoundary","selectedFeature","setSelectedFeature","setHardToCountStats","setShowFacilities","setMetric","Papa","parse","download","header","complete","results","mapDivRef","lnglat","zoom","key","mapboxgl","accessToken","Map","container","center","useMap","Layers","boundaryLayers","sourceLayer","selection","source_name","oldSelectionID","features","setFeatureState","selected","setPaintProperty","useGeoJSONLayer","tractFacilities","censusTractID","useMemo","filter","facility","f","useCensusTractFacilities","ref","App","basename","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.27360bf2.chunk.js","sourcesContent":["import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faCircle} from '@fortawesome/free-solid-svg-icons';\n\nexport default function ContactTypeLegend() {\n  return (\n    <section className=\"contact-type\">\n      <ul>\n        <li className=\"category-entry\">\n          <FontAwesomeIcon icon={faCircle} style={{color: '#C2A5CF'}} />{' '}\n          Internet First, English\n        </li>\n        <li className=\"category-entry\">\n          <FontAwesomeIcon icon={faCircle} style={{color: '#9970AB'}} />{' '}\n          Internet First, Bilingual\n        </li>\n        <li className=\"category-entry\">\n          <FontAwesomeIcon icon={faCircle} style={{color: '#A6DBA0'}} />{' '}\n          Internet Choice, English\n        </li>\n        <li className=\"category-entry\">\n          <FontAwesomeIcon icon={faCircle} style={{color: '#5AAE61'}} />{' '}\n          Internet Choice, Bilingual\n        </li>\n      </ul>\n    </section>\n  );\n}\n","import React from 'react';\n\nexport default function RangeLegend({name, min, max, colStart, colEnd}) {\n  const gradient = `linear-gradient(90deg, ${colStart} 0%, ${colEnd} 100%)`;\n\n  console.log('gradient is ', gradient);\n  return (\n    <div className=\"range-legend\">\n      <div\n        className=\"range-legend-bar\"\n        style={{\n          background: gradient,\n        }}\n      />\n      <div className=\"range-legend-labels\">\n        <p>{min}</p> <p>{max}</p>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\nexport default function BoundarySelector({\n  boundaries,\n  selectedBoundary,\n  onSelect,\n}) {\n  return (\n    <section className=\"boundary-selector\">\n      <h3>Boundaries</h3>\n\n      {boundaries && (\n        <Dropdown\n          options={Object.entries(boundaries).map(([id, layer]) => ({\n            value: id,\n            label: layer.datasetName,\n          }))}\n          onChange={a => onSelect(a.value)}\n          value={selectedBoundary}\n          placeholder=\"Select a boundary\"\n        />\n      )}\n    </section>\n  );\n}\n","import React from 'react';\n\nexport default function HelpTab() {\n  return (\n    <div className=\"help-tab\">\n      <section>\n        <h2>Help</h2>\n        <h3>About</h3>\n        <p>\n          Bacon ipsum dolor amet ground round pancetta doner bresaola\n          frankfurter sirloin ham pork chop fatback chislic flank tri-tip\n          turducken. Frankfurter shankle turkey, flank pancetta andouille tongue\n          pork belly ball tip. Rump leberkas short ribs jowl frankfurter\n          porchetta t-bone flank meatloaf sausage pork. Pastrami shankle\n          bresaola, venison tenderloin cupim tri-tip turkey short ribs biltong\n          beef ribs andouille jerky kevin. Shankle chicken venison sausage\n          alcatra kielbasa chuck ground round chislic turducken pork loin.\n        </p>\n      </section>\n      <section>\n        <h3>How to read this map</h3>\n        <p>\n          Bacon ipsum dolor amet ribeye strip steak porchetta doner, sirloin\n          biltong t-bone ground round. Boudin kevin meatloaf ham. Flank kielbasa\n          hamburger corned beef. Capicola kevin short ribs, jerky venison\n          meatball flank sausage meatloaf.\n        </p>\n      </section>\n    </div>\n  );\n}\n","import React, {useState} from 'react';\nimport ContactTypeLegend from './ContactTypeLegend';\nimport RangeLegend from './RangeLegend';\nimport BoundarySelector from './BoundarySelector';\nimport HelpTab from './HelpTab';\n\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {\n  faInfoCircle,\n  faLayerGroup,\n  faQuestionCircle,\n  faList,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\nexport default function Legend({\n  selectedBoundary,\n  boundaries,\n  onSelectBoundary,\n  showFacilities,\n  onShowFacilitiesChange,\n  onSelectMetric,\n  metric,\n}) {\n  const [tab, setTab] = useState('layers');\n  console.log('Tab is ', tab);\n  return (\n    <div className=\"Legend overlay\">\n      <div className=\"tabs\">\n        <div\n          className={tab === 'layers' ? 'selected' : ''}\n          onClick={() => setTab('layers')}>\n          <FontAwesomeIcon icon={faLayerGroup} />\n        </div>\n        <div\n          className={tab === 'legend' ? 'selected' : ''}\n          onClick={() => setTab('legend')}>\n          <FontAwesomeIcon icon={faList} />\n        </div>\n        <div\n          className={tab === 'info' ? 'selected' : ''}\n          onClick={() => setTab('info')}>\n          <FontAwesomeIcon icon={faInfoCircle} />\n        </div>\n        <div\n          className={tab === 'questions' ? 'selected' : ''}\n          onClick={() => setTab('questions')}>\n          <FontAwesomeIcon icon={faQuestionCircle} />\n        </div>\n      </div>\n      <div className=\"content\">\n        {tab === 'layers' && (\n          <section className=\"thematic-layer\">\n            <h3>Metric</h3>\n            <Dropdown\n              options={[\n                {value: 'strategy', label: 'Mail Strategy'},\n                {value: 'returnCount', label: '2020 Mail Return Rate'},\n              ]}\n              onChange={a => onSelectMetric(a.value)}\n              value={metric}\n              placeholder=\"Select a metric\"\n            />\n            {metric == 'strategy' ? (\n              <ContactTypeLegend />\n            ) : (\n              <RangeLegend\n                name=\"2020 Mail Return %\"\n                min={0}\n                max={100}\n                colStart=\"#309dae\"\n                colEnd=\"#ebf7f9\"\n              />\n            )}\n            <BoundarySelector\n              selectedBoundary={selectedBoundary}\n              onSelect={onSelectBoundary}\n              boundaries={boundaries}\n            />\n            <div className=\"facilitesToggle\">\n              <p>\n                Show Facilities{' '}\n                <input\n                  type=\"checkbox\"\n                  checked={showFacilities}\n                  onChange={e => onShowFacilitiesChange(e.target.checked)}\n                />\n              </p>\n            </div>\n          </section>\n        )}\n        {tab === 'questions' && <HelpTab />}\n      </div>\n    </div>\n  );\n}\n","export const colors = [\n  '#000000',\n  '#cf0621',\n  '#8f1158',\n  '#b93f22',\n  '#faaf12',\n].reverse();\n","import React from 'react';\nimport PieChart from 'react-minimal-pie-chart';\nimport {colors} from '../colors';\n\nexport default function PieCard({data, title}) {\n  const colData = data.map((d, i) => ({...d, color: colors[i % 5]}));\n  return (\n    <div className=\"pie-card\">\n      <h2>{title}</h2>\n      <div className=\"pie-card-content\">\n        <PieChart\n          style={{width: '100px', height: '100px'}}\n          viewBoxSize={[100, 100]}\n          data={colData}\n        />\n        <ul className=\"labels\">\n          {colData.map((entry, index) => (\n            <li className=\"label\">\n              <span className=\"bar\" style={{backgroundColor: colors[index]}} />\n              <span className=\"label-text\">{entry.title}</span>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function AssetCategoryCard({assets, title}) {\n  console.log('assets', assets);\n  return (\n    <div className=\"asset-card\">\n      <h2>{title}</h2>\n      <ul>\n        {assets.map(asset => (\n          <li className=\"asset\">\n            <h3>{asset.facname}</h3>\n            <p>\n              {[asset.address, asset.boro, asset.city, asset.zipcode].join(',')}\n            </p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import React, {useState} from 'react';\nimport {RadialChart} from 'react-vis';\nimport FacilityCard from './FacilityCard';\nimport SimpleBarChart from './SimpleBarChart';\nimport PieCard from './PieCard';\nimport AssetCategoryCard from './AssetCategoryCard';\n\nexport default function Details({feature, facilities, onSelectFacility}) {\n  console.log(feature);\n\n  console.log(facilities);\n\n  const [showFacilities, setShowFacilities] = useState(false);\n\n  const makeInternetData = feature => {\n    const cols = [\n      'NoInternet',\n      'Internet_NoSub',\n      'Internet',\n      'DialUpOnly',\n      'Broadband_Any',\n      'Cellular',\n      'CellularOnly',\n      'Broadband_CableFiberOpticDSL',\n      'Broadband_CableFiberOpticDSLOnly',\n      'Satellite',\n      'SatelliteOnly',\n      'OtherOnly',\n    ];\n    const data = cols.map(col => ({\n      value: feature.properties[col],\n      title: col,\n    }));\n    return data;\n  };\n  const contactStrategy = feature => {\n    switch (feature.strategy_code) {\n      case 0:\n        return 'Internet First, English';\n      case 1:\n        return 'Internet First, Bilingual';\n      case 2:\n        return 'Internet Choice, English';\n      case 3:\n        return 'Internet Choice, Bilingual';\n    }\n  };\n\n  const makeLEP = feature => {\n    const cols = [\n      'LEPHHs',\n      'LEPspanHHs',\n      'LEPindoeurHHs',\n      'LEPapacHHs',\n      'LEPotherHHs',\n    ];\n    const data = cols.map(col => ({\n      value: feature.properties[col],\n      title: col,\n    }));\n    return data;\n  };\n\n  return (\n    <div className=\"feature\">\n      {feature ? (\n        <React.Fragment>\n          <div className=\"overview\">\n            <h2>Census Tract: {feature.properties.GEOID}</h2>\n            <h2>General Info</h2>\n            <p>\n              Population: <span>{feature.properties.TotPopACS17}</span>\n            </p>\n            <p>\n              Mail return rate 2010: <span>{feature.properties.MRR2010}%</span>\n            </p>\n            <p>\n              Inital Contact Strategy:\n              <span>{contactStrategy(feature.properties)}</span>\n            </p>\n          </div>\n          <div className=\"cards\">\n            <div className=\"card demographics\">\n              <PieCard\n                title=\"Demographics\"\n                data={[\n                  {\n                    title: 'white',\n                    value:\n                      feature.properties.WhiteAloneOrCombo /\n                      feature.properties.TotPopACS17,\n                  },\n                  {\n                    title: 'black',\n                    value:\n                      feature.properties.BlackAloneOrCombo /\n                      feature.properties.TotPopACS17,\n                  },\n                  {\n                    title: 'asian',\n                    value:\n                      feature.properties.AsianAloneOrCombo /\n                      feature.properties.TotPopACS17,\n                  },\n                  {\n                    title: 'hispanic',\n                    value:\n                      feature.properties.Hispanic /\n                      feature.properties.TotPopACS17,\n                  },\n                ]}\n              />\n            </div>\n            <div className=\"card english_proficency\">\n              <PieCard\n                title=\"English Proficency\"\n                data={makeLEP(feature)}\n                norm={true}\n              />\n            </div>\n            <div className=\"card internet\">\n              <PieCard\n                title=\"Internet Access\"\n                data={makeInternetData(feature)}\n                norm={true}\n                style={{width: '500px'}}\n              />\n            </div>\n            <AssetCategoryCard title={'Medical'} assets={facilities} />\n          </div>\n        </React.Fragment>\n      ) : (\n        <div className=\"placeholder\">\n          <h2>Click tract for details</h2>\n        </div>\n      )}\n    </div>\n  );\n}\n","export const fillStyles = {\n  strategy: [\n    'match',\n    ['get', 'strategy_code'],\n    0,\n    '#C2A5CF',\n    1,\n    '#9970AB',\n    2,\n    '#A6DBA0',\n    3,\n    '#5AAE61',\n    'grey',\n  ],\n  returnCount: [\n    'interpolate',\n    ['linear'],\n    ['get', 'MRR2010'],\n    0,\n    '#309dae',\n    100,\n    '#ebf7f9',\n  ],\n};\n\nexport default {\n  HTCLayer: {\n    url: `${process.env.PUBLIC_URL}/CensusTractsAllVariables.geojson`,\n    paintFill: {\n      'fill-color': 'grey',\n      'fill-opacity': 0.7,\n    },\n    paintLine: {\n      'line-color': [\n        'case',\n        ['boolean', ['coalesce', ['feature-state', 'selected'], false], true],\n        'red',\n        'white',\n      ],\n      'line-width': [\n        'case',\n        ['boolean', ['coalesce', ['feature-state', 'selected'], false], true],\n        3,\n        1,\n      ],\n    },\n  },\n};\n\nexport function BoundaryLayers() {\n  const layer_list = [\n    {\n      id: 'cd',\n      datasetName: 'Community Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/yfnk-k7r4?method=export&format=Shapefile',\n      nameCol: 'boro_cd',\n      nameAlt: null,\n    },\n    {\n      id: 'pp',\n      datasetName: 'Police Precincts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/78dh-3ptz?method=export&format=Shapefile',\n      nameCol: 'precinct',\n      nameAlt: null,\n    },\n    {\n      id: 'sd',\n      datasetName: 'School Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/r8nu-ymqj?method=export&format=Shapefile',\n      nameCol: 'district',\n      nameAlt: 'districtco',\n    },\n    {\n      id: 'hc',\n      datasetName: 'Health Center Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/b55q-34ps?method=export&format=Shapefile',\n      nameCol: 'hcent_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'cc',\n      datasetName: 'City Council Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/yusd-j4xi?method=export&format=Shapefile',\n      nameCol: 'coun_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'nycongress',\n      datasetName: 'Congressional Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/qd3c-zuu7?method=export&format=Shapefile',\n      nameCol: 'cong_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'sa',\n      datasetName: 'State Assembly Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/pf5b-73bw?method=export&format=Shapefile',\n      nameCol: 'assem_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'ss',\n      datasetName: 'State Senate Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/h4i2-acfi?method=export&format=Shapefile',\n      nameCol: 'st_sen_dis',\n      nameAlt: null,\n    },\n    {\n      id: 'nta',\n      datasetName: 'Neighborhood Tabulation Area',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/cpf4-rkhq?method=export&format=Shapefile',\n      nameCol: 'ntaname',\n      nameAlt: 'ntacode',\n    },\n    {\n      id: 'bid',\n      datasetName: 'Business Improvement District',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/ejxk-d93y?method=export&format=Shapefile',\n      nameCol: 'bid',\n      nameAlt: null,\n    },\n    /*{\n      id: 'zipcode',\n      datasetName: 'Zip Code',\n      url: 'http://data.cityofnewyork.us/download/i8iw-xf4u/application%2Fzip',\n      nameCol: 'ZIPCODE',\n      nameAlt: null,\n},*/\n  ];\n\n  return layer_list.map(layer => ({\n    ...layer,\n    paintLine: {\n      'line-color': 'black',\n    },\n  }));\n}\n","import React, {useEffect, useState, useRef} from 'react';\nimport {BoundaryLayers} from '../Layers';\n\nexport default function useBoundaryLayers(map, selectedLayer) {\n  const [layers, setLayers] = useState({});\n\n  useEffect(() => {\n    if (map.current) {\n      let layerList = {};\n      map.current.on('load', () => {\n        console.log('adding boundary layers');\n        const boundaryLayers = BoundaryLayers();\n        boundaryLayers.forEach(layer => {\n          const sourceName = `${layer.id}_source`;\n\n          let layerDeets = {...layer};\n          console.log('adding source ', sourceName);\n          layerDeets.source = map.current.addSource(sourceName, {\n            type: 'geojson',\n            data: `${process.env.PUBLIC_URL}/boundaries/${layer.id}.geojson`,\n          });\n\n          if (layer.paintFill) {\n            layerDeets.fillLayer = map.current.addLayer(\n              {\n                id: `${layer.id}-fill`,\n                type: 'fill',\n                source: sourceName,\n                paint: layer.paintFill,\n              },\n              'waterway-label',\n            );\n          }\n          if (layer.paintLine) {\n            layerDeets.lineLayer = map.current.addLayer(\n              {\n                id: `${layer.id}-line`,\n                type: 'line',\n                source: sourceName,\n                paint: layer.paintLine,\n                layout: {\n                  visibility: selectedLayer == layer.id ? 'visible' : 'none',\n                },\n              },\n              'waterway-label',\n            );\n          }\n          layerList[layer.id] = layerDeets;\n        });\n        setLayers(layerList);\n      });\n    }\n  }, [map]);\n\n  useEffect(() => {\n    if (map.current) {\n      Object.entries(layers).forEach(([id, layer]) => {\n        map.current.setLayoutProperty(\n          `${layer.id}-line`,\n          'visibility',\n          id == selectedLayer ? 'visible' : 'none',\n        );\n      });\n    }\n  }, [map, selectedLayer]);\n  return layers;\n}\n","import React, {useEffect} from 'react';\nimport useFacilities from './useFacilities';\n\nexport default function useFacilitiesLayer(map, visible) {\n  const facilities = useFacilities();\n\n  useEffect(() => {\n    console.log('Map ', map, ' Facilities ', facilities);\n    if (map.current && facilities) {\n      map.current.on('load', () => {\n        map.current.loadImage(\n          `${process.env.PUBLIC_URL}/marker.png`,\n          (error, image) => {\n            if (error) throw error;\n            map.current.addImage('marker', image);\n            map.current.addLayer({\n              id: 'facilities',\n              type: 'symbol',\n              source: {\n                type: 'geojson',\n                data: facilities,\n              },\n              layout: {\n                'icon-image': 'marker',\n                'icon-size': 0.4,\n                'text-field': ['get', 'facname'],\n                'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n                'text-offset': [0, 0.6],\n                'text-size': 10,\n                'text-anchor': 'top',\n                visibility: visible ? 'visible' : 'none',\n              },\n            });\n          },\n        );\n      });\n    }\n  }, [map, facilities]);\n\n  useEffect(() => {\n    if (map.current && map.current.loaded()) {\n      map.current.setLayoutProperty(\n        `facilities`,\n        'visibility',\n        visible ? 'visible' : 'none',\n      );\n    }\n  }, [map, visible]);\n\n  return facilities;\n}\n","import React, {useEffect, useState, useMemo} from 'react';\n\nexport default function useFacilities() {\n  const [facilities, setFacilities] = useState(null);\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/facilities.geojson`)\n      .then(a => a.json())\n      .then(a => setFacilities(a));\n  }, []);\n  return facilities;\n}\n\nexport function useCensusTractFacilities(censusTractID, facilities) {\n  return useMemo(() => {\n    return censusTractID\n      ? facilities.features\n          .filter(facility => facility.properties.GEOID == censusTractID)\n          .map(f => f.properties)\n      : [];\n  }, [censusTractID, facilities]);\n}\n","import React, {useRef, useState, useEffect} from 'react';\nimport {useMap} from '../hooks/useMap';\nimport Legend from '../components/Legend';\nimport Details from '../components/Details';\nimport Papa from 'papaparse';\nimport {useMVTLayer} from '../hooks/useMVTLayer';\nimport {useGeoJSONLayer} from '../hooks/useGeoJSONLayer';\nimport useBoundaryLayers from '../hooks/useBoundaryLayers';\nimport useFacilitiesLayer from '../hooks/useFacilitiesLayer';\nimport {useCensusTractFacilities} from '../hooks/useFacilities';\nimport Layers, {fillStyles} from '../Layers';\n\nexport default function MainPage() {\n  const mapDiv = useRef(null);\n  const [selectedBoundary, setSelectedBoundary] = useState('cd');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [hardToCountStats, setHardToCountStats] = useState([]);\n  const [showFacilities, setShowFacilities] = useState(true);\n  const [metric, setMetric] = useState('strategy');\n\n  useEffect(() => {\n    Papa.parse('/hard_to_count_NY.csv', {\n      download: true,\n      header: true,\n      complete: function(results) {\n        setHardToCountStats(results);\n      },\n    });\n  }, []);\n\n  const map = useMap(mapDiv, {\n    lnglat: [-73.9920330193022, 40.75078660435196],\n    zoom: 10,\n    style: 'mapbox://styles/mapbox/light-v10',\n    key:\n      'pk.eyJ1Ijoic3R1YXJ0LWx5bm4iLCJhIjoiM2Q4ODllNmRkZDQ4Yzc3NTBhN2UyNDE0MWY2OTRiZWIifQ.8OEKvgZBCCtDFUXkjt66Pw',\n  });\n\n  //  const stategyLayer = useMVTLayer(map, Layers.censusStrategyLayer);\n\n  //  const HTCLayer = useMVTLayer(map, Layers.HTCLayer);\n  const style = {\n    ...Layers.HTCLayer,\n    ...{paintFill: {'fill-color': fillStyles[metric]}},\n  };\n\n  const GeojsonLayer = useGeoJSONLayer(map, 'HTC', {\n    ...style,\n    onClick: feature => setSelectedFeature(feature),\n    selection: selectedFeature,\n  });\n\n  // BoundaryLayers().forEach(layer => {\n  const boundaryLayers = useBoundaryLayers(map, selectedBoundary);\n\n  const facilities = useFacilitiesLayer(map, showFacilities);\n  const tractFacilities = useCensusTractFacilities(\n    selectedFeature ? selectedFeature.properties.GEOID : null,\n    facilities,\n  );\n  return (\n    <div className=\"main-page\">\n      <div className=\"map\" ref={mapDiv} />\n      <div className=\"info overlay\">\n        <h2>NYC CENSUS 2020 INTERACTIVE MAP</h2>\n        <h3>Created by Stuart Lynn: Hosted/designed Hester Street</h3>\n        <p>\n          This interactive map serves the purpose for any organization to learn\n          more about the people they serve. This map is fully interactive and\n          will remain avaliable after the Census effort\n        </p>\n      </div>\n      <div className=\"details overlay\">\n        <Details facilities={tractFacilities} feature={selectedFeature} />{' '}\n      </div>\n      <Legend\n        boundaries={boundaryLayers}\n        selectedBoundary={selectedBoundary}\n        onSelectBoundary={setSelectedBoundary}\n        showFacilities={showFacilities}\n        onShowFacilitiesChange={setShowFacilities}\n        metric={metric}\n        onSelectMetric={setMetric}\n      />\n    </div>\n  );\n}\n","import {useState, useRef, useEffect, useCallback} from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nexport function useMap(mapDivRef, {lnglat, zoom, style, key}) {\n  mapboxgl.accessToken = key;\n  const map = useRef(null);\n  useEffect(() => {\n    map.current = new mapboxgl.Map({\n      container: mapDivRef.current, // container id\n      style: style, // stylesheet location\n      center: lnglat, // starting position [lng, lat]\n      zoom: zoom, // starting zoom\n    });\n  }, [mapDivRef]);\n\n  return map;\n}\n","import {useEffect, useRef} from 'react';\n\nexport function useGeoJSONLayer(\n  map,\n  name,\n  {url, paintFill, paintLine, sourceLayer, onClick, selection},\n) {\n  const fillLayer = useRef(null);\n  const lineLayer = useRef(null);\n  const source = useRef(null);\n  const source_name = `${name}_source`;\n  const oldSelectionID = useRef(null);\n  useEffect(() => {\n    if (map.current) {\n      map.current.on('load', () => {\n        source.current = map.current.addSource(source_name, {\n          type: 'geojson',\n          data: url,\n        });\n\n        if (paintFill) {\n          fillLayer.current = map.current.addLayer(\n            {\n              id: `${name}-fill`,\n              type: 'fill',\n              source: source_name,\n              paint: paintFill,\n            },\n            'waterway-label',\n          );\n        }\n        if (paintLine) {\n          lineLayer.current = map.current.addLayer(\n            {\n              id: `${name}-line`,\n              type: 'line',\n              source: source_name,\n              paint: paintLine,\n            },\n            'waterway-label',\n          );\n        }\n        map.current.on('click', `${name}-fill`, e => {\n          console.log(e.features[0]);\n          if (onClick) {\n            onClick(e.features[0]);\n          }\n        });\n      });\n    }\n  }, [map]);\n\n  useEffect(() => {\n    if (map.current && selection) {\n      if (oldSelectionID.current) {\n        map.current.setFeatureState(\n          {source: source_name, id: oldSelectionID.current},\n          {selected: false},\n        );\n      }\n\n      map.current.setFeatureState(\n        {source: source_name, id: selection.id},\n        {selected: true},\n      );\n      oldSelectionID.current = selection.id;\n    }\n  }, [selection]);\n\n  useEffect(() => {\n    if (map.current && map.current.loaded()) {\n      console.log(\n        'setting fill color to be ',\n        paintFill['fill-color'],\n        paintFill,\n      );\n      map.current.setPaintProperty(\n        `${name}-fill`,\n        'fill-color',\n        paintFill['fill-color'],\n      );\n    }\n  }, [paintFill]);\n  return {fillLayer, source};\n}\n","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport MainPage from './pages/MainPage';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Route path=\"/\" component={MainPage} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}