{"version":3,"sources":["components/ContactTypeLegend.js","components/RangeLegend.js","components/BoundarySelector.js","components/Legend.js","components/FacilityCard.js","components/Details.js","Layers.js","hooks/useBoundaryLayers.js","hooks/useFacilitiesLayer.js","hooks/useFacilities.js","pages/MainPage.js","hooks/useMap.js","hooks/useGeoJSONLayer.js","App.js","serviceWorker.js","index.js"],"names":["ContactTypeLegend","className","icon","faCircle","style","color","RangeLegend","name","min","max","colStart","colEnd","gradient","console","log","background","BoundarySelector","boundaries","selectedBoundary","onSelect","options","Object","entries","map","value","label","datasetName","onChange","a","placeholder","Legend","onSelectBoundary","showFacilities","onShowFacilitiesChange","onSelectMetric","metric","type","checked","e","target","FacilityCard","facility","facname","address","boro","city","zipcode","factype","capacity","Details","feature","facilities","onSelectFacility","useState","setShowFacilities","Fragment","properties","GEOID","onClick","f","TotPopACS17","MRR2010","WhiteAloneOrCombo","BlackAloneOrCombo","AsianAloneOrCombo","Hispanic","width","height","data","col","angle","makeLEP","showLabels","labelsRadiusMultiplier","labelsStyle","fontSize","innerRadius","radius","makeInternetData","fillStyles","strategy","returnCount","HTCLayer","url","process","paintFill","paintLine","useBoundaryLayers","selectedLayer","layers","setLayers","useEffect","current","layerList","on","id","nameCol","nameAlt","layer","forEach","sourceName","layerDeets","source","addSource","fillLayer","addLayer","paint","lineLayer","layout","visibility","setLayoutProperty","useFacilitiesLayer","visible","setFacilities","fetch","then","json","useFacilities","loadImage","error","image","addImage","isStyleLoaded","MainPage","mapDiv","useRef","setSelectedBoundary","selectedFeature","setSelectedFeature","setHardToCountStats","setMetric","Papa","parse","download","header","complete","results","mapDivRef","lnglat","zoom","key","mapboxgl","accessToken","Map","container","center","useMap","Layers","sourceLayer","source_name","features","setPaintProperty","useGeoJSONLayer","boundaryLayers","tractFacilities","censusTractID","useMemo","filter","useCensusTractFacilities","ref","App","basename","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fe6b62e4.chunk.js","sourcesContent":["import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faCircle} from '@fortawesome/free-solid-svg-icons';\n\nexport default function ContactTypeLegend() {\n  return (\n    <section className=\"contact-type\">\n      <ul>\n        <li className=\"category-entry\">\n          <FontAwesomeIcon icon={faCircle} style={{color: '#C2A5CF'}} />{' '}\n          Internet First, English\n        </li>\n        <li className=\"category-entry\">\n          <FontAwesomeIcon icon={faCircle} style={{color: '#9970AB'}} />{' '}\n          Internet First, Bilingual\n        </li>\n        <li className=\"category-entry\">\n          <FontAwesomeIcon icon={faCircle} style={{color: '#A6DBA0'}} />{' '}\n          Internet Choice, English\n        </li>\n        <li className=\"category-entry\">\n          <FontAwesomeIcon icon={faCircle} style={{color: '#5AAE61'}} />{' '}\n          Internet Choice, Bilingual\n        </li>\n      </ul>\n    </section>\n  );\n}\n","import React from 'react';\n\nexport default function RangeLegend({name, min, max, colStart, colEnd}) {\n  const gradient = `linear-gradient(90deg, ${colStart} 0%, ${colEnd} 100%)`;\n\n  console.log('gradient is ', gradient);\n  return (\n    <div className=\"range-legend\">\n      <h4 className=\"range-legend-title\">{name}</h4>\n      <div\n        className=\"range-legend-bar\"\n        style={{\n          background: gradient,\n        }}\n      />\n      <div className=\"range-legend-labels\">\n        <p>{min}</p> <p>{max}</p>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\nexport default function BoundarySelector({\n  boundaries,\n  selectedBoundary,\n  onSelect,\n}) {\n  return (\n    <section className=\"boundary-selector\">\n      <h4>Boundaries</h4>\n\n      {boundaries && (\n        <Dropdown\n          options={Object.entries(boundaries).map(([id, layer]) => ({\n            value: id,\n            label: layer.datasetName,\n          }))}\n          onChange={a => onSelect(a.value)}\n          value={selectedBoundary}\n          placeholder=\"Select a boundary\"\n        />\n      )}\n    </section>\n  );\n}\n","import React from 'react';\nimport ContactTypeLegend from './ContactTypeLegend';\nimport RangeLegend from './RangeLegend';\nimport BoundarySelector from './BoundarySelector';\n\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\nexport default function Legend({\n  selectedBoundary,\n  boundaries,\n  onSelectBoundary,\n  showFacilities,\n  onShowFacilitiesChange,\n  onSelectMetric,\n  metric,\n}) {\n  return (\n    <div className=\"Legend\">\n      <section className=\"thematic-layer\">\n        <Dropdown\n          options={[\n            {value: 'strategy', label: 'Mail Strategy'},\n            {value: 'returnCount', label: '2020 Mail Return Rate'},\n          ]}\n          onChange={a => onSelectMetric(a.value)}\n          value={metric}\n          placeholder=\"Select a metric\"\n        />\n        {metric == 'strategy' ? (\n          <ContactTypeLegend />\n        ) : (\n          <RangeLegend\n            name=\"2020 Mail Return %\"\n            min={0}\n            max={100}\n            colStart=\"#309dae\"\n            colEnd=\"#ebf7f9\"\n          />\n        )}\n        <BoundarySelector\n          selectedBoundary={selectedBoundary}\n          onSelect={onSelectBoundary}\n          boundaries={boundaries}\n        />\n        <div className=\"facilitesToggle\">\n          <p>\n            Show Facilities{' '}\n            <input\n              type=\"checkbox\"\n              checked={showFacilities}\n              onChange={e => onShowFacilitiesChange(e.target.checked)}\n            />\n          </p>\n        </div>\n      </section>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function FacilityCard({facility}) {\n  console.log('facilty', facility);\n  return (\n    <div className=\"card facility\">\n      <h3>{facility.facname}</h3>\n      <p>\n        {facility.address} <br /> {facility.boro} <br /> {facility.city} <br />{' '}\n        {facility.zipcode}\n      </p>\n      <p>{facility.factype} </p>\n      <p>Capacity: {facility.capacity ? facility.capacity : 'Unknown'}</p>\n    </div>\n  );\n}\n","import React, {useState} from 'react';\nimport {RadialChart} from 'react-vis';\nimport FacilityCard from './FacilityCard';\n\nexport default function Details({feature, facilities, onSelectFacility}) {\n  console.log(feature);\n\n  const [showFacilities, setShowFacilities] = useState(false);\n\n  const makeInternetData = feature => {\n    const cols = [\n      'NoInternet',\n      'Internet_NoSub',\n      'Internet',\n      'DialUpOnly',\n      'Broadband_Any',\n      'Cellular',\n      'CellularOnly',\n      'Broadband_CableFiberOpticDSL',\n      'Broadband_CableFiberOpticDSLOnly',\n      'Satellite',\n      'SatelliteOnly',\n      'OtherOnly',\n    ];\n    const data = cols.map(col => ({\n      angle: feature.properties[col],\n      label: col,\n    }));\n    return data;\n  };\n\n  const makeLEP = feature => {\n    const cols = [\n      'LEPHHs',\n      'LEPspanHHs',\n      'LEPindoeurHHs',\n      'LEPapacHHs',\n      'LEPotherHHs',\n    ];\n    const data = cols.map(col => ({\n      angle: feature.properties[col],\n      label: col,\n    }));\n    return data;\n  };\n\n  return (\n    <div className=\"feature\">\n      {feature ? (\n        <React.Fragment>\n          <div className=\"details-header\">\n            <h2>Census Tract: {feature.properties.GEOID}</h2>\n            <p>\n              <span\n                onClick={() => setShowFacilities(false)}\n                className={!showFacilities ? 'selected' : ''}>\n                Stats\n              </span>{' '}\n              /{' '}\n              <span\n                onClick={() => setShowFacilities(true)}\n                className={showFacilities ? 'selected' : ''}>\n                Facilities\n              </span>\n            </p>\n          </div>\n          <div className=\"cards\">\n            {showFacilities ? (\n              facilities.map(f => <FacilityCard facility={f} />)\n            ) : (\n              <React.Fragment>\n                <div className=\"card basic\">\n                  <h3>Basic Info</h3>\n                  <p>Population {feature.properties.TotPopACS17}</p>\n                  <p>Mail return rate 2010 :{feature.properties.MRR2010}%</p>\n                </div>\n                <div className=\"card demographics\">\n                  <h3>Demographics</h3>\n                  <p>\n                    White :{' '}\n                    {feature.properties.WhiteAloneOrCombo /\n                      feature.properties.TotPopACS17}{' '}\n                    %\n                  </p>\n                  <p>\n                    Black:{' '}\n                    {feature.properties.BlackAloneOrCombo /\n                      feature.properties.TotPopACS17}{' '}\n                    %\n                  </p>\n                  <p>\n                    Asian:{' '}\n                    {feature.properties.AsianAloneOrCombo /\n                      feature.properties.TotPopACS17}{' '}\n                    %\n                  </p>\n                  <p>\n                    Hispanic:{' '}\n                    {feature.properties.Hispanic /\n                      feature.properties.TotPopACS17}{' '}\n                    %\n                  </p>\n                </div>\n                <div className=\"card english_proficency\">\n                  <h3>English Proficency</h3>\n                  <RadialChart\n                    width={200}\n                    height={200}\n                    data={makeLEP(feature)}\n                    showLabels\n                    labelsRadiusMultiplier={1.1}\n                    labelsStyle={{\n                      fontSize: 12,\n                    }}\n                    innerRadius={80}\n                    radius={100}\n                  />\n                </div>\n                <div className=\"card internet\">\n                  <h3>Internet</h3>\n                  <RadialChart\n                    width={200}\n                    height={200}\n                    data={makeInternetData(feature)}\n                    showLabels\n                    labelsRadiusMultiplier={1.1}\n                    labelsStyle={{\n                      fontSize: 12,\n                      color: 'white',\n                    }}\n                  />\n                </div>\n              </React.Fragment>\n            )}\n          </div>\n        </React.Fragment>\n      ) : (\n        <h2>Click to see details of feature</h2>\n      )}\n    </div>\n  );\n}\n","export const fillStyles = {\n  strategy: [\n    'match',\n    ['get', 'strategy_code'],\n    0,\n    '#C2A5CF',\n    1,\n    '#9970AB',\n    2,\n    '#A6DBA0',\n    3,\n    '#5AAE61',\n    'grey',\n  ],\n  returnCount: [\n    'interpolate',\n    ['linear'],\n    ['get', 'MRR2010'],\n    0,\n    '#309dae',\n    100,\n    '#ebf7f9',\n  ],\n};\n\nexport default {\n  HTCLayer: {\n    url: `${process.env.PUBLIC_URL}/CensusTractsAllVariables.geojson`,\n    paintFill: {\n      'fill-color': 'grey',\n      'fill-opacity': 0.7,\n    },\n    paintLine: {\n      'line-color': 'white',\n    },\n  },\n};\n\nexport function BoundaryLayers() {\n  const layer_list = [\n    {\n      id: 'cd',\n      datasetName: 'Community Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/yfnk-k7r4?method=export&format=Shapefile',\n      nameCol: 'boro_cd',\n      nameAlt: null,\n    },\n    {\n      id: 'pp',\n      datasetName: 'Police Precincts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/78dh-3ptz?method=export&format=Shapefile',\n      nameCol: 'precinct',\n      nameAlt: null,\n    },\n    {\n      id: 'sd',\n      datasetName: 'School Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/r8nu-ymqj?method=export&format=Shapefile',\n      nameCol: 'district',\n      nameAlt: 'districtco',\n    },\n    {\n      id: 'hc',\n      datasetName: 'Health Center Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/b55q-34ps?method=export&format=Shapefile',\n      nameCol: 'hcent_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'cc',\n      datasetName: 'City Council Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/yusd-j4xi?method=export&format=Shapefile',\n      nameCol: 'coun_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'nycongress',\n      datasetName: 'Congressional Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/qd3c-zuu7?method=export&format=Shapefile',\n      nameCol: 'cong_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'sa',\n      datasetName: 'State Assembly Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/pf5b-73bw?method=export&format=Shapefile',\n      nameCol: 'assem_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'ss',\n      datasetName: 'State Senate Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/h4i2-acfi?method=export&format=Shapefile',\n      nameCol: 'st_sen_dis',\n      nameAlt: null,\n    },\n    {\n      id: 'nta',\n      datasetName: 'Neighborhood Tabulation Area',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/cpf4-rkhq?method=export&format=Shapefile',\n      nameCol: 'ntaname',\n      nameAlt: 'ntacode',\n    },\n    {\n      id: 'bid',\n      datasetName: 'Business Improvement District',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/ejxk-d93y?method=export&format=Shapefile',\n      nameCol: 'bid',\n      nameAlt: null,\n    },\n    /*{\n      id: 'zipcode',\n      datasetName: 'Zip Code',\n      url: 'http://data.cityofnewyork.us/download/i8iw-xf4u/application%2Fzip',\n      nameCol: 'ZIPCODE',\n      nameAlt: null,\n},*/\n  ];\n\n  return layer_list.map(layer => ({\n    ...layer,\n    paintLine: {\n      'line-color': 'black',\n    },\n  }));\n}\n","import React, {useEffect, useState, useRef} from 'react';\nimport {BoundaryLayers} from '../Layers';\n\nexport default function useBoundaryLayers(map, selectedLayer) {\n  const [layers, setLayers] = useState({});\n\n  useEffect(() => {\n    if (map.current) {\n      let layerList = {};\n      map.current.on('load', () => {\n        console.log('adding boundary layers');\n        const boundaryLayers = BoundaryLayers();\n        boundaryLayers.forEach(layer => {\n          const sourceName = `${layer.id}_source`;\n\n          let layerDeets = {...layer};\n          console.log('adding source ', sourceName);\n          layerDeets.source = map.current.addSource(sourceName, {\n            type: 'geojson',\n            data: `${process.env.PUBLIC_URL}/boundaries/${layer.id}.geojson`,\n          });\n\n          if (layer.paintFill) {\n            layerDeets.fillLayer = map.current.addLayer(\n              {\n                id: `${layer.id}-fill`,\n                type: 'fill',\n                source: sourceName,\n                paint: layer.paintFill,\n              },\n              'waterway-label',\n            );\n          }\n          if (layer.paintLine) {\n            layerDeets.lineLayer = map.current.addLayer(\n              {\n                id: `${layer.id}-line`,\n                type: 'line',\n                source: sourceName,\n                paint: layer.paintLine,\n                layout: {\n                  visibility: selectedLayer == layer.id ? 'visible' : 'none',\n                },\n              },\n              'waterway-label',\n            );\n          }\n          layerList[layer.id] = layerDeets;\n        });\n        setLayers(layerList);\n      });\n    }\n  }, [map]);\n\n  useEffect(() => {\n    if (map.current) {\n      Object.entries(layers).forEach(([id, layer]) => {\n        map.current.setLayoutProperty(\n          `${layer.id}-line`,\n          'visibility',\n          id == selectedLayer ? 'visible' : 'none',\n        );\n      });\n    }\n  }, [map, selectedLayer]);\n  return layers;\n}\n","import React, {useEffect} from 'react';\nimport useFacilities from './useFacilities';\n\nexport default function useFacilitiesLayer(map, visible) {\n  const facilities = useFacilities();\n\n  useEffect(() => {\n    console.log('Map ', map, ' Facilities ', facilities);\n    if (map.current && facilities) {\n      map.current.on('load', () => {\n        map.current.loadImage(\n          `${process.env.PUBLIC_URL}/marker.png`,\n          (error, image) => {\n            if (error) throw error;\n            map.current.addImage('marker', image);\n            map.current.addLayer({\n              id: 'facilities',\n              type: 'symbol',\n              source: {\n                type: 'geojson',\n                data: facilities,\n              },\n              layout: {\n                'icon-image': 'marker',\n                'icon-size': 0.4,\n                'text-field': ['get', 'facname'],\n                'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n                'text-offset': [0, 0.6],\n                'text-size': 10,\n                'text-anchor': 'top',\n                visibility: visible ? 'visible' : 'none',\n              },\n            });\n          },\n        );\n      });\n    }\n  }, [map, facilities]);\n\n  useEffect(() => {\n    if (map.current && map.current.isStyleLoaded()) {\n      map.current.setLayoutProperty(\n        `facilities`,\n        'visibility',\n        visible ? 'visible' : 'none',\n      );\n    }\n  }, [map, visible]);\n\n  return facilities;\n}\n","import React, {useEffect, useState, useMemo} from 'react';\n\nexport default function useFacilities() {\n  const [facilities, setFacilities] = useState(null);\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/facilities.geojson`)\n      .then(a => a.json())\n      .then(a => setFacilities(a));\n  }, []);\n  return facilities;\n}\n\nexport function useCensusTractFacilities(censusTractID, facilities) {\n  return useMemo(() => {\n    return censusTractID\n      ? facilities.features\n          .filter(facility => facility.properties.GEOID == censusTractID)\n          .map(f => f.properties)\n      : [];\n  }, [censusTractID, facilities]);\n}\n","import React, {useRef, useState, useEffect} from 'react';\nimport {useMap} from '../hooks/useMap';\nimport Legend from '../components/Legend';\nimport Details from '../components/Details';\nimport Papa from 'papaparse';\nimport {useMVTLayer} from '../hooks/useMVTLayer';\nimport {useGeoJSONLayer} from '../hooks/useGeoJSONLayer';\nimport useBoundaryLayers from '../hooks/useBoundaryLayers';\nimport useFacilitiesLayer from '../hooks/useFacilitiesLayer';\nimport {useCensusTractFacilities} from '../hooks/useFacilities';\nimport Layers, {fillStyles} from '../Layers';\n\nexport default function MainPage() {\n  const mapDiv = useRef(null);\n  const [selectedBoundary, setSelectedBoundary] = useState('cd');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [hardToCountStats, setHardToCountStats] = useState([]);\n  const [showFacilities, setShowFacilities] = useState(true);\n  const [metric, setMetric] = useState('strategy');\n\n  useEffect(() => {\n    Papa.parse('/hard_to_count_NY.csv', {\n      download: true,\n      header: true,\n      complete: function(results) {\n        setHardToCountStats(results);\n      },\n    });\n  }, []);\n\n  const map = useMap(mapDiv, {\n    lnglat: [-73.9920330193022, 40.75078660435196],\n    zoom: 10,\n    style: 'mapbox://styles/mapbox/light-v10',\n    key:\n      'pk.eyJ1Ijoic3R1YXJ0LWx5bm4iLCJhIjoiM2Q4ODllNmRkZDQ4Yzc3NTBhN2UyNDE0MWY2OTRiZWIifQ.8OEKvgZBCCtDFUXkjt66Pw',\n  });\n\n  //  const stategyLayer = useMVTLayer(map, Layers.censusStrategyLayer);\n\n  //  const HTCLayer = useMVTLayer(map, Layers.HTCLayer);\n  const style = {\n    ...Layers.HTCLayer,\n    ...{paintFill: {'fill-color': fillStyles[metric]}},\n  };\n\n  console.log('style is ', style);\n  const GeojsonLayer = useGeoJSONLayer(map, 'HTC', {\n    ...style,\n    onClick: feature => setSelectedFeature(feature),\n  });\n\n  // BoundaryLayers().forEach(layer => {\n  const boundaryLayers = useBoundaryLayers(map, selectedBoundary);\n\n  const facilities = useFacilitiesLayer(map, showFacilities);\n  const tractFacilities = useCensusTractFacilities(\n    selectedFeature ? selectedFeature.properties.GEOID : null,\n    facilities,\n  );\n  return (\n    <div className=\"main-page\">\n      <div className=\"map\" ref={mapDiv} />\n      <div className=\"details\">\n        <Details facilities={tractFacilities} feature={selectedFeature} />{' '}\n      </div>\n      <Legend\n        boundaries={boundaryLayers}\n        selectedBoundary={selectedBoundary}\n        onSelectBoundary={setSelectedBoundary}\n        showFacilities={showFacilities}\n        onShowFacilitiesChange={setShowFacilities}\n        metric={metric}\n        onSelectMetric={setMetric}\n      />\n    </div>\n  );\n}\n","import {useState, useRef, useEffect, useCallback} from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nexport function useMap(mapDivRef, {lnglat, zoom, style, key}) {\n  mapboxgl.accessToken = key;\n  const map = useRef(null);\n  useEffect(() => {\n    map.current = new mapboxgl.Map({\n      container: mapDivRef.current, // container id\n      style: style, // stylesheet location\n      center: lnglat, // starting position [lng, lat]\n      zoom: zoom, // starting zoom\n    });\n  }, [mapDivRef]);\n\n  return map;\n}\n","import {useEffect, useRef} from 'react';\n\nexport function useGeoJSONLayer(\n  map,\n  name,\n  {url, paintFill, paintLine, sourceLayer, onClick},\n) {\n  const fillLayer = useRef(null);\n  const lineLayer = useRef(null);\n  const source = useRef(null);\n  const source_name = `${name}_source`;\n  useEffect(() => {\n    if (map.current) {\n      map.current.on('load', () => {\n        source.current = map.current.addSource(source_name, {\n          type: 'geojson',\n          data: url,\n        });\n\n        if (paintFill) {\n          fillLayer.current = map.current.addLayer(\n            {\n              id: `${name}-fill`,\n              type: 'fill',\n              source: source_name,\n              paint: paintFill,\n            },\n            'waterway-label',\n          );\n        }\n        if (paintLine) {\n          lineLayer.current = map.current.addLayer(\n            {\n              id: `${name}-line`,\n              type: 'line',\n              source: source_name,\n              paint: paintLine,\n            },\n            'waterway-label',\n          );\n        }\n        map.current.on('click', `${name}-fill`, e => {\n          console.log(e.features[0]);\n          if (onClick) {\n            onClick(e.features[0]);\n          }\n        });\n      });\n    }\n  }, [map]);\n\n  useEffect(() => {\n    if (map.current && map.current.isStyleLoaded()) {\n      console.log(\n        'setting fill color to be ',\n        paintFill['fill-color'],\n        paintFill,\n      );\n      map.current.setPaintProperty(\n        `${name}-fill`,\n        'fill-color',\n        paintFill['fill-color'],\n      );\n    }\n  }, [paintFill]);\n  return {fillLayer, source};\n}\n","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport MainPage from './pages/MainPage';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Route path=\"/\" component={MainPage} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}