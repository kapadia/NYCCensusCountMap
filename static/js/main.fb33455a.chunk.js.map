{"version":3,"sources":["components/ContactTypeLegend.js","components/RangeLegend.js","components/BoundarySelector.js","components/FacilitiesSelector.js","components/HelpTab.js","components/Legend.js","colors.js","components/PieCard.js","components/AssetCategoryCard.js","components/DetailsSelector.js","hooks/useFacilities.js","components/Details.js","Layers.js","pages/MainPage.js","hooks/useMap.js","hooks/useGeoJSONLayer.js","hooks/useBoundaryLayers.js","hooks/useFacilitiesLayer.js","App.js","serviceWorker.js","index.js"],"names":["ContactTypeLegend","className","icon","faCircle","style","color","RangeLegend","name","min","max","colStart","colEnd","gradient","console","log","background","BoundarySelector","boundaries","selectedBoundary","onSelect","options","Object","entries","map","value","label","datasetName","onChange","a","placeholder","FacilitiesSection","title","selected","useState","expanded","setExpanded","onClick","faAngleDown","faAngleRight","option","type","checked","includes","FacilitiesSelector","onSelected","section","HelpTab","Legend","onSelectBoundary","onSelectMetric","showFacilities","onShowFacilitiesChange","metric","selectedFacilityTypes","onSelectFacilityType","tab","setTab","faLayerGroup","faList","faInfoCircle","faQuestionCircle","colors","reverse","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","radius","index","x","Math","cos","RADIAN","y","sin","fill","textAnchor","dominantBaseline","toFixed","PI","PieCard","data","colData","d","i","width","height","labelLine","entry","backgroundColor","AssetCategoryCard","assets","asset","address","boro","city","zipcode","join","DetailsSelector","isSelected","useFacilities","facilities","setFacilities","useEffect","fetch","process","then","json","Details","feature","layer","onSelectFacility","facilityTypes","selectedDetails","setSelectedDetails","id","types","layerIDs","cd","tracts","cc","sd","nta","useMemo","features","filter","facility","properties","length","asset_type","f","useFilteredFacilities","geoid","featureName","nat","Fragment","GEOID","total_population","MRR2010","strategy_code","contactStrategy","detail","internet_no_access","internet_subscription","internet_no_subscription","makeInternetData","norm","english_english","english_asian","english_spanish","english_european","english_other","makeEnglishData","age_less_5","age_6_15","age_16_64","age_64_over","makeAgeData","race_white","race_total","race_black","race_asian","race_hispanic","race_other","makeDemographicData","foreign_born_native","foreign_born_foreign","makeForeignData","own_vs_rent_rent","own_vs_rent_owner","makeRenting","fillStyles","strategy","returnCount","HTCLayer","url","paintFill","paintLine","BoundaryLayers","polygons","labels","nameCol","nameAlt","MainPage","mapDiv","useRef","setSelectedBoundary","selectedFeature","setSelectedFeature","setHardToCountStats","setShowFacilities","setSelectedFacilityTypes","setMetric","Papa","parse","download","header","complete","results","mapDivRef","lnglat","zoom","key","mapboxgl","accessToken","current","Map","container","center","useMap","Layers","boundaryLayers","sourceLayer","selection","fillLayer","visible","lineLayer","source","source_name","oldSelectionID","on","addSource","addLayer","paint","layout","visibility","e","setFeatureState","loaded","setPaintProperty","useGeoJSONLayer","selectedLayer","selectedVar","onSelectLayer","selectedGeomID","layers","setLayers","layerList","forEach","sourceName","layerDeets","sourceLabels","labelLayer","setLayoutProperty","useBoundaryLayers","boundary","loadImage","error","image","addImage","useFacilitiesLayer","ref","t","App","basename","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb33455a.chunk.js","sourcesContent":["import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faCircle} from '@fortawesome/free-solid-svg-icons';\n\nexport default function ContactTypeLegend() {\n  return (\n    <section className=\"contact-type\">\n      <ul>\n        <li className=\"category-entry\">\n          <FontAwesomeIcon icon={faCircle} style={{color: '#C2A5CF'}} />{' '}\n          Internet First, English\n        </li>\n        <li className=\"category-entry\">\n          <FontAwesomeIcon icon={faCircle} style={{color: '#9970AB'}} />{' '}\n          Internet First, Bilingual\n        </li>\n        <li className=\"category-entry\">\n          <FontAwesomeIcon icon={faCircle} style={{color: '#A6DBA0'}} />{' '}\n          Internet Choice, English\n        </li>\n        <li className=\"category-entry\">\n          <FontAwesomeIcon icon={faCircle} style={{color: '#5AAE61'}} />{' '}\n          Internet Choice, Bilingual\n        </li>\n      </ul>\n    </section>\n  );\n}\n","import React from 'react';\n\nexport default function RangeLegend({name, min, max, colStart, colEnd}) {\n  const gradient = `linear-gradient(90deg, ${colStart} 0%, ${colEnd} 100%)`;\n\n  console.log('gradient is ', gradient);\n  return (\n    <div className=\"range-legend\">\n      <div\n        className=\"range-legend-bar\"\n        style={{\n          background: gradient,\n        }}\n      />\n      <div className=\"range-legend-labels\">\n        <p>{min}</p> <p>{max}</p>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\nexport default function BoundarySelector({\n  boundaries,\n  selectedBoundary,\n  onSelect,\n}) {\n  const options = Object.entries(boundaries).map(([id, layer]) => ({\n    value: id,\n    label: layer.datasetName,\n  }));\n  return (\n    <section className=\"boundary-selector\">\n      <h3>Boundaries</h3>\n\n      {boundaries && (\n        <Dropdown\n          options={[{value: 'tracts', label: 'Census Tracts'}, ...options]}\n          onChange={a => onSelect(a.value)}\n          value={selectedBoundary}\n          placeholder=\"Select a boundary\"\n        />\n      )}\n    </section>\n  );\n}\n","import React, {useState} from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faAngleRight, faAngleDown} from '@fortawesome/free-solid-svg-icons';\n\nfunction FacilitiesSection({title, options, selected, onSelect}) {\n  const [expanded, setExpanded] = useState(false);\n\n  return (\n    <section>\n      <h2 onClick={() => setExpanded(!expanded)}>\n        <FontAwesomeIcon icon={expanded ? faAngleDown : faAngleRight} /> {title}\n      </h2>\n      {expanded && (\n        <ul>\n          {options.map(option => (\n            <li className=\"facilities-option\">\n              <input\n                type=\"checkbox\"\n                checked={selected.includes(option)}\n                onChange={() => onSelect(option)}\n              />\n              {option}\n            </li>\n          ))}\n        </ul>\n      )}\n    </section>\n  );\n}\n\nexport default function FacilitiesSelector({selected, onSelected}) {\n  const sections = [\n    {\n      title: 'Educational Assets',\n      options: [\n        'Head Start and Early Head Start',\n        'Universal Pre-K',\n        'K-12 (NYC Public Schools)',\n        'Community Schools',\n        'Public Libraries',\n      ],\n    },\n\n    {\n      title: 'Services and Programs',\n      options: [\n        'Shelters',\n        'Food Kitchens and Pantries',\n        'Senior Centers',\n        'Mental Health Services',\n        'Hospitals and Rehab Centers',\n        'LGBTQ Centers and Services',\n        'NYCHA Developments',\n      ],\n    },\n\n    {\n      title: 'Neighborhood Institutions',\n      options: [\n        'Community-Based Organizations',\n        'Faith-Based Organizations',\n        \"Community Centers and YMCA's\",\n      ],\n    },\n  ];\n  const [expanded, setExpanded] = useState({\n    'Education Assets': false,\n  });\n  return (\n    <div className=\"facilities-selector\">\n      <h3>Community Assets</h3>\n      {sections.map(section => (\n        <FacilitiesSection\n          title={section.title}\n          options={section.options}\n          selected={selected}\n          onSelect={option => onSelected(option)}\n        />\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function HelpTab() {\n  return (\n    <div className=\"help-tab\">\n      <section>\n        <h2>Help</h2>\n        <h3>About</h3>\n        <p>\n          Bacon ipsum dolor amet ground round pancetta doner bresaola\n          frankfurter sirloin ham pork chop fatback chislic flank tri-tip\n          turducken. Frankfurter shankle turkey, flank pancetta andouille tongue\n          pork belly ball tip. Rump leberkas short ribs jowl frankfurter\n          porchetta t-bone flank meatloaf sausage pork. Pastrami shankle\n          bresaola, venison tenderloin cupim tri-tip turkey short ribs biltong\n          beef ribs andouille jerky kevin. Shankle chicken venison sausage\n          alcatra kielbasa chuck ground round chislic turducken pork loin.\n        </p>\n      </section>\n      <section>\n        <h3>How to read this map</h3>\n        <p>\n          Bacon ipsum dolor amet ribeye strip steak porchetta doner, sirloin\n          biltong t-bone ground round. Boudin kevin meatloaf ham. Flank kielbasa\n          hamburger corned beef. Capicola kevin short ribs, jerky venison\n          meatball flank sausage meatloaf.\n        </p>\n      </section>\n    </div>\n  );\n}\n","import React, {useState} from 'react';\nimport ContactTypeLegend from './ContactTypeLegend';\nimport RangeLegend from './RangeLegend';\nimport BoundarySelector from './BoundarySelector';\nimport FacilitiesSelector from './FacilitiesSelector';\nimport HelpTab from './HelpTab';\n\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {\n  faInfoCircle,\n  faLayerGroup,\n  faQuestionCircle,\n  faList,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\nexport default function Legend({\n  selectedBoundary,\n  boundaries,\n  onSelectBoundary,\n  showFacilities,\n  onShowFacilitiesChange,\n  onSelectMetric,\n  metric,\n  selectedFacilityTypes,\n  onSelectFacilityType,\n}) {\n  const [tab, setTab] = useState('layers');\n  console.log('Tab is ', tab);\n  return (\n    <div className=\"Legend overlay\">\n      <div className=\"tabs\">\n        <div\n          className={tab === 'layers' ? 'selected' : ''}\n          onClick={() => setTab('layers')}>\n          <FontAwesomeIcon icon={faLayerGroup} />\n        </div>\n        <div\n          className={tab === 'legend' ? 'selected' : ''}\n          onClick={() => setTab('legend')}>\n          <FontAwesomeIcon icon={faList} />\n        </div>\n        <div\n          className={tab === 'info' ? 'selected' : ''}\n          onClick={() => setTab('info')}>\n          <FontAwesomeIcon icon={faInfoCircle} />\n        </div>\n        <div\n          className={tab === 'questions' ? 'selected' : ''}\n          onClick={() => setTab('questions')}>\n          <FontAwesomeIcon icon={faQuestionCircle} />\n        </div>\n      </div>\n      <div className=\"content\">\n        {tab === 'layers' && (\n          <section className=\"thematic-layer\">\n            <h3>Metric</h3>\n            <Dropdown\n              options={[\n                {value: 'strategy', label: 'Mail Strategy'},\n                {value: 'returnCount', label: '2020 Mail Return Rate'},\n              ]}\n              onChange={a => onSelectMetric(a.value)}\n              value={metric}\n              placeholder=\"Select a metric\"\n            />\n            {metric == 'strategy' ? (\n              <ContactTypeLegend />\n            ) : (\n              <RangeLegend\n                name=\"2020 Mail Return %\"\n                min={0}\n                max={100}\n                colStart=\"#309dae\"\n                colEnd=\"#ebf7f9\"\n              />\n            )}\n            <BoundarySelector\n              selectedBoundary={selectedBoundary}\n              onSelect={onSelectBoundary}\n              boundaries={boundaries}\n            />\n            <FacilitiesSelector\n              selected={selectedFacilityTypes}\n              onSelected={onSelectFacilityType}\n            />\n          </section>\n        )}\n        {tab === 'questions' && <HelpTab />}\n      </div>\n    </div>\n  );\n}\n","export const colors = [\n  '#000000',\n  '#cf0621',\n  '#8f1158',\n  '#b93f22',\n  '#faaf12',\n].reverse();\n","import React from 'react';\nimport {colors} from '../colors';\nimport {PieChart, Pie, Sector, Cell} from 'recharts';\n\nconst renderCustomizedLabel = ({\n  cx,\n  cy,\n  midAngle,\n  innerRadius,\n  outerRadius,\n  percent,\n  index,\n}) => {\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n  if (percent < 4 / 100) {\n    return '';\n  }\n  return (\n    <text\n      x={x}\n      y={y}\n      fill=\"white\"\n      textAnchor={x > cx ? 'start' : 'end'}\n      dominantBaseline=\"central\">\n      {`${(percent * 100).toFixed(0)}%`}\n    </text>\n  );\n};\n\nconst RADIAN = Math.PI / 180;\nexport default function PieCard({data, title}) {\n  const colData = data.map((d, i) => ({...d, color: colors[i % 5]}));\n  return (\n    <div className=\"pie-card\">\n      <h2>{title}</h2>\n      <div className=\"pie-card-content\">\n        <PieChart width={140} height={140} data={colData}>\n          <Pie\n            data={colData}\n            cx={60}\n            cy={70}\n            labelLine={false}\n            label={renderCustomizedLabel}\n            outerRadius={60}\n            fill=\"#8884d8\">\n            {colData.map((entry, index) => (\n              <Cell fill={entry.color} />\n            ))}\n          </Pie>\n        </PieChart>\n        <ul className=\"labels\">\n          {colData.map((entry, index) => (\n            <li className=\"label\">\n              <span className=\"bar\" style={{backgroundColor: colors[index]}} />\n              <span className=\"label-text\">{entry.name}</span>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function AssetCategoryCard({assets, title}) {\n  console.log('assets', assets);\n  return (\n    <div className=\"asset-card\">\n      <h2>{title}</h2>\n      <ul>\n        {assets.map(asset => (\n          <li className=\"asset\">\n            <h3>{asset.name}</h3>\n            <p>\n              {[asset.address, asset.boro, asset.city, asset.zipcode].join(',')}\n            </p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function DetailsSelector({selected, onSelect}) {\n  const isSelected = name => (name === selected ? 'selected' : '');\n  return (\n    <div className=\"details-selector\">\n      <ul>\n        <li\n          onClick={() => onSelect('barriers')}\n          className={isSelected('barriers')}>\n          Barriers\n        </li>\n        <li\n          onClick={() => onSelect('demographics')}\n          className={isSelected('demographics')}>\n          Demographics\n        </li>\n        <li\n          onClick={() => onSelect('census2020')}\n          className={isSelected('census2020')}>\n          Census 2020 info\n        </li>\n        <li onClick={() => onSelect('assets')} className={isSelected('assets')}>\n          Assets\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import React, {useEffect, useState, useMemo} from 'react';\n\nexport default function useFacilities() {\n  const [facilities, setFacilities] = useState(null);\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/facilities.geojson`)\n      .then(a => a.json())\n      .then(a => setFacilities(a));\n  }, []);\n  return facilities;\n}\n\nexport function useFilteredFacilities(id, layer, types) {\n  const facilities = useFacilities();\n  const layerIDs = {\n    cd: 'community_district_id',\n    tracts: 'census_tract_id',\n    cc: 'city_council_district_id',\n    sd: 'school_district_id',\n    nta: 'nta_id',\n  };\n  return useMemo(() => {\n    return id\n      ? facilities.features\n          .filter(facility => facility.properties[layerIDs[layer]] == id)\n          .filter(facility =>\n            types && types.length > 0\n              ? types.includes(facility.properties.asset_type)\n              : true,\n          )\n          .map(f => f.properties)\n      : [];\n  }, [id, facilities, layer, types]);\n}\n","import React, {useState} from 'react';\nimport {RadialChart} from 'react-vis';\nimport FacilityCard from './FacilityCard';\nimport SimpleBarChart from './SimpleBarChart';\nimport PieCard from './PieCard';\nimport AssetCategoryCard from './AssetCategoryCard';\nimport DetailsSelector from './DetailsSelector';\nimport {useFilteredFacilities} from '../hooks/useFacilities';\n\nexport default function Details({\n  feature,\n  onSelectFacility,\n  layer,\n  facilityTypes,\n}) {\n  const [showFacilities, setShowFacilities] = useState(false);\n\n  const [selectedDetails, setSelectedDetails] = useState('barriers');\n  const facilities = useFilteredFacilities(\n    feature ? feature.properties.geoid : null,\n    layer,\n    facilityTypes,\n  );\n\n  const makeRenting = feature => {\n    const properties = feature.properties;\n    return [\n      {name: 'Reting', value: properties.own_vs_rent_rent},\n      {name: 'Owned', value: properties.own_vs_rent_owner},\n    ];\n  };\n\n  const featureNames = {\n    tracts: 'Census Tract',\n    cd: 'Community District',\n    sd: 'School District',\n    cc: 'City Council District',\n    nat: 'Neighborhood Tablulation Area',\n  };\n  const featureName = featureNames[layer];\n\n  console.log('layer:  ', layer, ' feature name  ', featureName);\n\n  const makeAgeData = feature => {\n    const properties = feature.properties;\n    const data = [\n      {\n        name: '5 years or younger',\n        value: properties.age_less_5,\n      },\n      {\n        name: '6 yrs - 15 yrs',\n        value: properties.age_6_15,\n      },\n      {\n        name: '16 yrs - 64 yrs',\n        value: properties.age_16_64,\n      },\n      {\n        name: '65 yrs or older',\n        value: properties.age_64_over,\n      },\n    ];\n    return data;\n  };\n  const makeForeignData = feature => {\n    const properties = feature.properties;\n    return [\n      {name: 'Native Born', value: properties.foreign_born_native},\n      {name: 'Foreign Born', value: properties.foreign_born_foreign},\n    ];\n  };\n  const makeEnglishData = feature => {\n    const properties = feature.properties;\n\n    return [\n      {name: 'English', value: properties.english_english},\n      {name: 'Asian Languages', value: properties.english_asian},\n      {name: 'Spanish', value: properties.english_spanish},\n      {name: 'European Languages', value: properties.english_european},\n      {name: 'Other', value: properties.english_other},\n    ];\n  };\n  const makeInternetData = feature => {\n    const properties = feature.properties;\n    const data = [\n      {name: 'No Internet', value: properties.internet_no_access},\n      {\n        name: 'Full Subscription',\n        value: properties.internet_subscription,\n      },\n      {\n        name: 'Limited Subscription',\n        value: properties.internet_no_subscription,\n      },\n    ];\n    console.log(properties);\n    return data;\n  };\n  const contactStrategy = feature => {\n    switch (feature.strategy_code) {\n      case 0:\n        return 'Internet First, English';\n      case 1:\n        return 'Internet First, Bilingual';\n      case 2:\n        return 'Internet Choice, English';\n      case 3:\n        return 'Internet Choice, Bilingual';\n    }\n  };\n  const makeDemographicData = feature => {\n    return [\n      {\n        name: 'white',\n        value: feature.properties.race_white / feature.properties.race_total,\n      },\n      {\n        name: 'black',\n        value: feature.properties.race_black / feature.properties.race_total,\n      },\n      {\n        name: 'asian',\n        value: feature.properties.race_asian / feature.properties.race_total,\n      },\n      {\n        name: 'latinx',\n        value: feature.properties.race_hispanic / feature.properties.race_total,\n      },\n      {\n        name: 'other',\n        value: feature.properties.race_other / feature.properties.race_total,\n      },\n    ];\n  };\n\n  const makeLEP = feature => {\n    const cols = [\n      'LEPHHs',\n      'LEPspanHHs',\n      'LEPindoeurHHs',\n      'LEPapacHHs',\n      'LEPotherHHs',\n    ];\n    const data = cols.map(col => ({\n      value: feature.properties[col],\n      title: col,\n    }));\n    return data;\n  };\n\n  return (\n    <div className=\"feature\">\n      {feature ? (\n        <React.Fragment>\n          <div className=\"overview\">\n            <h2>\n              {featureName}:{' '}\n              {layer === 'tracts'\n                ? feature.properties.GEOID\n                : feature.properties.geoid}\n            </h2>\n            <p>\n              Population:{' '}\n              <span style={{color: 'red'}}>\n                {feature.properties.total_population}\n              </span>\n            </p>\n            <p>\n              Mail return rate 2010:{' '}\n              <span style={{color: 'red'}}>{feature.properties.MRR2010}%</span>\n            </p>\n            <p>\n              Inital Contact Strategy:\n              <span style={{color: 'red'}}>\n                {contactStrategy(feature.properties)}\n              </span>\n            </p>\n          </div>\n          <div className=\"selector-cards\">\n            <DetailsSelector\n              selected={selectedDetails}\n              onSelect={detail => setSelectedDetails(detail)}\n            />\n            <div className=\"cards\">\n              {selectedDetails == 'barriers' && (\n                <>\n                  <div className=\"card internet\">\n                    <PieCard\n                      title=\"Internet Access\"\n                      data={makeInternetData(feature)}\n                      norm={true}\n                      style={{width: '500px'}}\n                    />\n                  </div>\n                  <div className=\"card english_proficency\">\n                    <PieCard\n                      title=\"English Proficency\"\n                      data={makeEnglishData(feature)}\n                      norm={true}\n                    />\n                  </div>\n                  <div className=\"card age\">\n                    <PieCard\n                      title=\"Age\"\n                      data={makeAgeData(feature)}\n                      norm={true}\n                    />\n                  </div>\n                </>\n              )}\n              {selectedDetails === 'demographics' && (\n                <>\n                  <div className=\"card demographics\">\n                    <PieCard\n                      title=\"Demographics\"\n                      data={makeDemographicData(feature)}\n                    />\n                  </div>\n                  <div className=\"card foreign\">\n                    <PieCard\n                      title=\"Foreign Born\"\n                      data={makeForeignData(feature)}\n                    />\n                  </div>\n                  <div className=\"card housing\">\n                    <PieCard title=\"Renting\" data={makeRenting(feature)} />\n                  </div>\n                </>\n              )}\n              {selectedDetails === 'assets' && (\n                <>\n                  {facilityTypes.map(type => (\n                    <AssetCategoryCard\n                      title={type}\n                      assets={facilities.filter(f => f.asset_type === type)}\n                    />\n                  ))}\n                </>\n              )}\n            </div>\n          </div>\n        </React.Fragment>\n      ) : (\n        <div className=\"placeholder\">\n          <h2>Click {featureName} for details</h2>\n        </div>\n      )}\n    </div>\n  );\n}\n","export const fillStyles = {\n  strategy: [\n    'match',\n    ['get', 'strategy_code'],\n    0,\n    '#C2A5CF',\n    1,\n    '#9970AB',\n    2,\n    '#A6DBA0',\n    3,\n    '#5AAE61',\n    'grey',\n  ],\n  returnCount: [\n    'interpolate',\n    ['linear'],\n    ['get', 'MRR2010'],\n    0,\n    '#309dae',\n    100,\n    '#ebf7f9',\n  ],\n};\n\nexport default {\n  HTCLayer: {\n    //url: `${process.env.PUBLIC_URL}/CensusTractsAllVariables.geojson`,\n    url: `${process.env.PUBLIC_URL}/census_tracts.geojson`,\n    paintFill: {\n      'fill-color': 'grey',\n      'fill-opacity': 0.7,\n    },\n    paintLine: {\n      'line-color': [\n        'case',\n        ['boolean', ['coalesce', ['feature-state', 'selected'], false], true],\n        'red',\n        'white',\n      ],\n      'line-width': [\n        'case',\n        ['boolean', ['coalesce', ['feature-state', 'selected'], false], true],\n        3,\n        1,\n      ],\n    },\n  },\n};\n\nexport function BoundaryLayers() {\n  const layer_list = [\n    {\n      id: 'cd',\n      datasetName: 'Community Districts',\n      polygons: 'community_districts_vars.geojson',\n      labels: 'communty_district_labels.geojson',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/yfnk-k7r4?method=export&format=Shapefile',\n      nameCol: 'boro_cd',\n      nameAlt: null,\n    },\n    {\n      id: 'sd',\n      datasetName: 'School Districts',\n      polygons: 'school_districts_with_vars.geojson',\n      labels: 'school_district_labels.geojson',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/r8nu-ymqj?method=export&format=Shapefile',\n      nameCol: 'district',\n      nameAlt: 'districtco',\n    },\n    {\n      id: 'cc',\n      datasetName: 'City Council Districts',\n      polygons: 'city_council_district_with_vars.geojson',\n      labels: 'city_council_district_labels.geojson',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/yusd-j4xi?method=export&format=Shapefile',\n      nameCol: 'coun_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'nta',\n      datasetName: 'Neighborhood Tabulation Area',\n      polygons: 'ntas_with_vars.geojson',\n      labels: 'nta_labels.geojson',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/cpf4-rkhq?method=export&format=Shapefile',\n      nameCol: 'ntaname',\n      nameAlt: 'ntacode',\n    },\n    /*{\n      id: 'pp',\n      datasetName: 'Police Precincts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/78dh-3ptz?method=export&format=Shapefile',\n      nameCol: 'precinct',\n      nameAlt: null,\n    },\n    {\n      id: 'hc',\n      datasetName: 'Health Center Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/b55q-34ps?method=export&format=Shapefile',\n      nameCol: 'hcent_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'nycongress',\n      datasetName: 'Congressional Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/qd3c-zuu7?method=export&format=Shapefile',\n      nameCol: 'cong_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'sa',\n      datasetName: 'State Assembly Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/pf5b-73bw?method=export&format=Shapefile',\n      nameCol: 'assem_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'ss',\n      datasetName: 'State Senate Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/h4i2-acfi?method=export&format=Shapefile',\n      nameCol: 'st_sen_dis',\n      nameAlt: null,\n    },\n    {\n      id: 'bid',\n      datasetName: 'Business Improvement District',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/ejxk-d93y?method=export&format=Shapefile',\n      nameCol: 'bid',\n      nameAlt: null,\n    },\n    /*{\n      id: 'zipcode',\n      datasetName: 'Zip Code',\n      url: 'http://data.cityofnewyork.us/download/i8iw-xf4u/application%2Fzip',\n      nameCol: 'ZIPCODE',\n      nameAlt: null,\n},*/\n  ];\n\n  return layer_list.map(layer => ({\n    ...layer,\n    paintLine: {\n      'line-color': 'black',\n    },\n  }));\n}\n","import React, {useRef, useState, useEffect} from 'react';\nimport {useMap} from '../hooks/useMap';\nimport Legend from '../components/Legend';\nimport Details from '../components/Details';\nimport Papa from 'papaparse';\nimport {useMVTLayer} from '../hooks/useMVTLayer';\nimport {useGeoJSONLayer} from '../hooks/useGeoJSONLayer';\nimport useBoundaryLayers from '../hooks/useBoundaryLayers';\nimport useFacilitiesLayer from '../hooks/useFacilitiesLayer';\nimport Layers, {fillStyles} from '../Layers';\n\nexport default function MainPage() {\n  const mapDiv = useRef(null);\n  const [selectedBoundary, setSelectedBoundary] = useState('cd');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [hardToCountStats, setHardToCountStats] = useState([]);\n  const [showFacilities, setShowFacilities] = useState(true);\n  const [selectedFacilityTypes, setSelectedFacilityTypes] = useState([]);\n  const [metric, setMetric] = useState('strategy');\n\n  useEffect(() => {\n    Papa.parse('/hard_to_count_NY.csv', {\n      download: true,\n      header: true,\n      complete: function(results) {\n        setHardToCountStats(results);\n      },\n    });\n  }, []);\n\n  const onToggleFacilityType = type => {\n    selectedFacilityTypes.includes(type)\n      ? setSelectedFacilityTypes(selectedFacilityTypes.filter(t => t !== type))\n      : setSelectedFacilityTypes([...selectedFacilityTypes, type]);\n  };\n\n  const map = useMap(mapDiv, {\n    lnglat: [-73.9920330193022, 40.75078660435196],\n    zoom: 10,\n    style: 'mapbox://styles/mapbox/light-v10',\n    key:\n      'pk.eyJ1Ijoic3R1YXJ0LWx5bm4iLCJhIjoiM2Q4ODllNmRkZDQ4Yzc3NTBhN2UyNDE0MWY2OTRiZWIifQ.8OEKvgZBCCtDFUXkjt66Pw',\n  });\n\n  useEffect(() => {\n    setSelectedFeature(null);\n  }, [selectedBoundary]);\n  //  const stategyLayer = useMVTLayer(map, Layers.censusStrategyLayer);\n\n  //  const HTCLayer = useMVTLayer(map, Layers.HTCLayer);\n  const style = {\n    ...Layers.HTCLayer,\n    ...{paintFill: {'fill-color': fillStyles[metric], 'fill-opacity': 0.7}},\n  };\n\n  const GeojsonLayer = useGeoJSONLayer(map, 'HTC', {\n    ...style,\n    onClick: feature => {\n      if (selectedBoundary === 'tracts') {\n        setSelectedFeature(feature);\n      }\n    },\n    selection: selectedFeature,\n    visible: selectedBoundary === 'tracts',\n  });\n\n  // BoundaryLayers().forEach(layer => {\n  const boundaryLayers = useBoundaryLayers(\n    map,\n    selectedBoundary,\n    null,\n    selectedBoundary,\n    selectedFeature ? selectedFeature.id : null,\n    boundary => setSelectedFeature(boundary),\n  );\n\n  const facilities = useFacilitiesLayer(map, showFacilities);\n  return (\n    <div className=\"main-page\">\n      <div className=\"map\" ref={mapDiv} />\n      <div className=\"info overlay\">\n        <h2>NYC CENSUS 2020 INTERACTIVE MAP</h2>\n        <h3>Created by Stuart Lynn: Hosted/designed Hester Street</h3>\n        <p>\n          This interactive map serves the purpose for any organization to learn\n          more about the people they serve. This map is fully interactive and\n          will remain avaliable after the Census effort\n        </p>\n      </div>\n      <div className=\"details overlay\">\n        <Details\n          feature={selectedFeature}\n          layer={selectedBoundary}\n          facilityTypes={selectedFacilityTypes}\n        />{' '}\n      </div>\n      <Legend\n        boundaries={boundaryLayers}\n        selectedBoundary={selectedBoundary}\n        onSelectBoundary={setSelectedBoundary}\n        showFacilities={showFacilities}\n        onShowFacilitiesChange={setShowFacilities}\n        selectedFacilityTypes={selectedFacilityTypes}\n        onSelectFacilityType={onToggleFacilityType}\n        metric={metric}\n        onSelectMetric={setMetric}\n      />\n    </div>\n  );\n}\n","import {useState, useRef, useEffect, useCallback} from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport style from '../map_style';\n\nexport function useMap(mapDivRef, {lnglat, zoom, key}) {\n  mapboxgl.accessToken = key;\n  const map = useRef(null);\n  useEffect(() => {\n    map.current = new mapboxgl.Map({\n      container: mapDivRef.current, // container id\n      style: style, // stylesheet location\n      center: lnglat, // starting position [lng, lat]\n      zoom: zoom, // starting zoom\n    });\n  }, [mapDivRef]);\n\n  return map;\n}\n","import {useEffect, useRef} from 'react';\n\nexport function useGeoJSONLayer(\n  map,\n  name,\n  {url, paintFill, paintLine, sourceLayer, onClick, selection, visible},\n) {\n  const fillLayer = useRef(null);\n  const lineLayer = useRef(null);\n  const source = useRef(null);\n  const source_name = `${name}_source`;\n  const oldSelectionID = useRef(null);\n  useEffect(() => {\n    if (map.current) {\n      map.current.on('load', () => {\n        source.current = map.current.addSource(source_name, {\n          type: 'geojson',\n          data: url,\n        });\n\n        if (paintFill) {\n          fillLayer.current = map.current.addLayer({\n            id: `${name}-fill`,\n            type: 'fill',\n            source: source_name,\n            paint: paintFill,\n            layout: {\n              visibility: 'visible', // visible ? 'visible' : 'none',\n            },\n          });\n        }\n        if (paintLine) {\n          lineLayer.current = map.current.addLayer({\n            id: `${name}-line`,\n            type: 'line',\n            source: source_name,\n            paint: paintLine,\n            layout: {\n              visibility: 'visible', // visible ? 'visible' : 'none',\n            },\n          });\n        }\n        map.current.on('click', `${name}-fill`, e => {\n          console.log(e.features[0]);\n          if (onClick) {\n            onClick(e.features[0]);\n          }\n        });\n      });\n    }\n  }, [map]);\n\n  useEffect(() => {\n    if (map.current && selection) {\n      if (oldSelectionID.current) {\n        map.current.setFeatureState(\n          {source: source_name, id: oldSelectionID.current},\n          {selected: false},\n        );\n      }\n\n      map.current.setFeatureState(\n        {source: source_name, id: selection.id},\n        {selected: true},\n      );\n      oldSelectionID.current = selection.id;\n    }\n  }, [selection]);\n\n  /*  useEffect(() => {\n    if (map.current && map.current.loaded()) {\n      map.current.setLayoutProperty(\n        `${name}-fill`,\n        'visibility',\n        visible ? 'visible' : 'none',\n      );\n      map.current.setLayoutProperty(\n        `${name}-line`,\n        'visibility',\n        visible ? 'visible' : 'none',\n      );\n    }\n  }, [map, visible]);\n*/\n  useEffect(() => {\n    if (map.current && map.current.loaded()) {\n      console.log(\n        'setting fill color to be ',\n        paintFill['fill-color'],\n        paintFill,\n      );\n      map.current.setPaintProperty(\n        `${name}-fill`,\n        'fill-color',\n        paintFill['fill-color'],\n      );\n    }\n  }, [paintFill]);\n  return {fillLayer, source};\n}\n","import React, {useEffect, useState, useRef} from 'react';\nimport {BoundaryLayers} from '../Layers';\n\nexport default function useBoundaryLayers(\n  map,\n  selectedLayer,\n  selectedVar,\n  onSelectLayer,\n  selectedGeomID,\n  onClick,\n) {\n  const [layers, setLayers] = useState({});\n  const oldSelectionID = useRef(null);\n\n  useEffect(() => {\n    if (map.current) {\n      let layerList = {};\n      map.current.on('load', () => {\n        const boundaryLayers = BoundaryLayers();\n        boundaryLayers.forEach(layer => {\n          const sourceName = `${layer.id}_source`;\n\n          let layerDeets = {...layer};\n          layerDeets.source = map.current.addSource(sourceName, {\n            type: 'geojson',\n            data: `${process.env.PUBLIC_URL}/boundaries/${layer.polygons}`,\n          });\n\n          layerDeets.sourceLabels = map.current.addSource(\n            sourceName + '_labels',\n            {\n              type: 'geojson',\n              data: `${process.env.PUBLIC_URL}/boundaries/${layer.labels}`,\n            },\n          );\n\n          layerDeets.fillLayer = map.current.addLayer({\n            id: `${layer.id}-fill`,\n            type: 'fill',\n            source: sourceName,\n            paint: {\n              'fill-color': 'grey',\n              'fill-opacity': [\n                'case',\n                [\n                  'boolean',\n                  ['coalesce', ['feature-state', 'selected'], false],\n                  true,\n                ],\n                0,\n                0.7,\n              ],\n            },\n            layout: {\n              visibility: selectedLayer == layer.id ? 'visible' : 'none',\n            },\n          });\n\n          if (layer.paintLine) {\n            layerDeets.lineLayer = map.current.addLayer({\n              id: `${layer.id}-line`,\n              type: 'line',\n              source: sourceName,\n              paint: {\n                'line-color': [\n                  'case',\n                  [\n                    'boolean',\n                    ['coalesce', ['feature-state', 'selected'], false],\n                    true,\n                  ],\n                  'red',\n                  'black',\n                ],\n              },\n              layout: {\n                visibility: selectedLayer == layer.id ? 'visible' : 'none',\n              },\n            });\n          }\n\n          layerDeets.labelLayer = map.current.addLayer({\n            id: `${layer.id}-labels`,\n            type: 'symbol',\n            source: sourceName + '_labels',\n            layout: {\n              visibility: selectedLayer == layer.id ? 'visible' : 'none',\n              'text-field': ['get', 'geoid'],\n              'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n              'text-offset': [0, 0.0],\n              'text-size': 15,\n              'text-anchor': 'top',\n              'text-allow-overlap': true,\n            },\n          });\n          layerList[layer.id] = layerDeets;\n        });\n        setLayers(layerList);\n      });\n    }\n  }, [map]);\n\n  useEffect(() => {\n    if (map.current) {\n      Object.entries(layers).forEach(([id, layer]) => {\n        map.current.setLayoutProperty(\n          `${layer.id}-line`,\n          'visibility',\n          id == selectedLayer ? 'visible' : 'none',\n        );\n        map.current.setLayoutProperty(\n          `${layer.id}-labels`,\n          'visibility',\n          id == selectedLayer ? 'visible' : 'none',\n        );\n        map.current.setLayoutProperty(\n          `${layer.id}-fill`,\n          'visibility',\n          id == selectedLayer ? 'visible' : 'none',\n        );\n      });\n    }\n  }, [map, selectedLayer]);\n\n  useEffect(() => {\n    const source_name = `${selectedLayer}_source`;\n\n    if (map.current && selectedGeomID) {\n      if (oldSelectionID.current) {\n        map.current.setFeatureState(\n          {source: source_name, id: oldSelectionID.current},\n          {selected: false},\n        );\n      }\n\n      map.current.setFeatureState(\n        {source: source_name, id: selectedGeomID},\n        {selected: true},\n      );\n      oldSelectionID.current = selectedGeomID;\n    }\n  }, [selectedGeomID, selectedLayer, map]);\n\n  useEffect(() => {\n    if (map.current) {\n      const boundaryLayers = BoundaryLayers();\n      boundaryLayers.forEach(layer => {\n        map.current.on('click', `${layer.id}-fill`, e => {\n          if (onClick) {\n            onClick(e.features[0], layer.id);\n          }\n        });\n      });\n    }\n  }, [map]);\n  return layers;\n}\n","import React, {useEffect} from 'react';\nimport useFacilities from './useFacilities';\n\nexport default function useFacilitiesLayer(map, visible, layer, id, types) {\n  const facilities = useFacilities();\n\n  useEffect(() => {\n    console.log('Map ', map, ' Facilities ', facilities);\n    if (map.current && facilities) {\n      console.log('Facilities are ', facilities);\n      map.current.on('load', () => {\n        map.current.loadImage(\n          `${process.env.PUBLIC_URL}/marker.png`,\n          (error, image) => {\n            if (error) throw error;\n            map.current.addImage('marker', image);\n            map.current.addLayer({\n              id: 'facilities',\n              type: 'symbol',\n              source: {\n                type: 'geojson',\n                data: facilities,\n              },\n              layout: {\n                'icon-image': 'marker',\n                'icon-size': 0.2,\n                'text-field': ['get', 'name'],\n                'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n                'text-offset': [0, 0.6],\n                'text-size': 10,\n                'text-anchor': 'top',\n                //'icon-allow-overlap': true,\n                //              'text-allow-overlap': true,\n                visibility: visible ? 'visible' : 'none',\n              },\n              paint: {\n                'text-color': 'rgba(255,255,255,1)',\n              },\n            });\n          },\n        );\n      });\n    }\n  }, [map, facilities]);\n\n  useEffect(() => {\n    if (map.current && map.current.loaded()) {\n      console.log('Toggling visible on facilities');\n      map.current.setLayoutProperty(\n        `facilities`,\n        'visibility',\n        visible ? 'visible' : 'none',\n      );\n    }\n  }, [map, visible]);\n\n  return facilities;\n}\n","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport MainPage from './pages/MainPage';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Route path=\"/\" component={MainPage} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}