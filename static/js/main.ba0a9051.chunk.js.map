{"version":3,"sources":["components/ContactTypeLegend.js","components/BoundarySelector.js","components/Legend.js","components/Details.js","Layers.js","hooks/useBoundaryLayers.js","pages/MainPage.js","hooks/useMap.js","hooks/useGeoJSONLayer.js","hooks/useFacilities.js","App.js","serviceWorker.js","index.js"],"names":["ContactTypeLegend","className","icon","faCircle","style","color","BoundarySelector","boundaries","selectedBoundary","onSelect","options","Object","entries","map","value","label","datasetName","onChange","a","placeholder","Legend","onSelectBoundary","Details","feature","console","log","Fragment","properties","ct2010","TotPopACS17","MRR2010","width","height","data","col","angle","makeLEP","showLabels","labelsRadiusMultiplier","labelsStyle","fontSize","innerRadius","radius","makeInternetData","geojsonLayer","url","process","paintFill","paintLine","censusStrategyLayer","sourceLayer","HTCLayer","useBoundaryLayers","selectedLayer","useState","layers","setLayers","useEffect","current","layerList","on","id","nameCol","nameAlt","layer","forEach","sourceName","layerDeets","source","addSource","type","fillLayer","addLayer","paint","lineLayer","layout","visibility","setLayoutProperty","MainPage","mapDiv","useRef","setSelectedBoundary","selectedFeature","setSelectedFeature","setHardToCountStats","Papa","parse","download","header","complete","results","mapDivRef","lnglat","zoom","key","mapboxgl","accessToken","Map","container","center","useMap","boundaryLayers","name","onClick","source_name","e","features","useGeoJSONLayer","Layers","fetch","then","json","ref","App","basename","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sSAIe,SAASA,IACtB,OACE,6BAASC,UAAU,gBACjB,4BACE,wBAAIA,UAAU,kBACZ,kBAAC,IAAD,CAAiBC,KAAMC,IAAUC,MAAO,CAACC,MAAO,aAAe,IADjE,2BAIA,wBAAIJ,UAAU,kBACZ,kBAAC,IAAD,CAAiBC,KAAMC,IAAUC,MAAO,CAACC,MAAO,aAAe,IADjE,6BAIA,wBAAIJ,UAAU,kBACZ,kBAAC,IAAD,CAAiBC,KAAMC,IAAUC,MAAO,CAACC,MAAO,aAAe,IADjE,4BAIA,wBAAIJ,UAAU,kBACZ,kBAAC,IAAD,CAAiBC,KAAMC,IAAUC,MAAO,CAACC,MAAO,aAAe,IADjE,gC,2BChBO,SAASC,EAAT,GAIX,IAHFC,EAGC,EAHDA,WACAC,EAEC,EAFDA,iBACAC,EACC,EADDA,SAEA,OACE,6BAASR,UAAU,qBACjB,0CAECM,GACC,kBAAC,IAAD,CACEG,QAASC,OAAOC,QAAQL,GAAYM,KAAI,yCAAkB,CACxDC,MADsC,KAEtCC,MAFsC,KAEzBC,gBAEfC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEJ,QAC1BA,MAAON,EACPW,YAAY,uBCjBP,SAASC,EAAT,GAIX,IAHFZ,EAGC,EAHDA,iBACAD,EAEC,EAFDA,WACAc,EACC,EADDA,iBAEA,OACE,yBAAKpB,UAAU,UACb,6BAASA,UAAU,kBACjB,kBAACD,EAAD,MACA,kBAACM,EAAD,CACEE,iBAAkBA,EAClBC,SAAUY,EACVd,WAAYA,M,YCbP,SAASe,EAAT,GAA6B,IAAXC,EAAU,EAAVA,QAC/BC,QAAQC,IAAIF,GAwCZ,OACE,yBAAKtB,UAAU,WACZsB,EACC,kBAAC,IAAMG,SAAP,KACE,6CAAmBH,EAAQI,WAAWC,QACtC,yBAAK3B,UAAU,SACb,yBAAKA,UAAU,cACb,0CACA,yCAAesB,EAAQI,WAAWE,aAClC,qDAA2BN,EAAQI,WAAWG,QAA9C,MAEF,yBAAK7B,UAAU,qBACb,6CAEF,yBAAKA,UAAU,2BACb,kDACA,kBAAC,IAAD,CACE8B,MAAO,IACPC,OAAQ,IACRC,KAlCE,SAAAV,GAYd,MAXa,CACX,SACA,aACA,gBACA,aACA,eAEgBV,KAAI,SAAAqB,GAAG,MAAK,CAC5BC,MAAOZ,EAAQI,WAAWO,GAC1BnB,MAAOmB,MAwBSE,CAAQb,GACdc,YAAU,EACVC,uBAAwB,IACxBC,YAAa,CACXC,SAAU,IAEZC,YAAa,GACbC,OAAQ,OAGZ,yBAAKzC,UAAU,iBACb,wCACA,kBAAC,IAAD,CACE8B,MAAO,IACPC,OAAQ,IACRC,KAxEW,SAAAV,GACvB,IAcMU,EAdO,CACX,aACA,iBACA,WACA,aACA,gBACA,WACA,eACA,+BACA,mCACA,YACA,gBACA,aAEgBpB,KAAI,SAAAqB,GAAG,MAAK,CAC5BC,MAAOZ,EAAQI,WAAWO,GAC1BnB,MAAOmB,MAGT,OADAV,QAAQC,IAAIQ,GACLA,EAoDWU,CAAiBpB,GACvBc,YAAU,EACVC,uBAAwB,IACxBG,YAAa,GACbC,OAAQ,IACRH,YAAa,CACXC,SAAU,SAOpB,gE,qBC3FO,OACbI,aAAc,CACZC,IAAI,GAAD,OAAKC,qBAAL,qCACHC,UAAW,CACT,aAAc,CACZ,QACA,CAAC,MAAO,iBACR,EACA,UACA,EACA,UACA,EACA,UACA,EACA,UACA,SAGJC,UAAW,CACT,aAAc,cAGlBC,oBAAqB,CACnBJ,IACE,gIACFK,YAAa,gBACbH,UAAW,CACT,aAAc,CACZ,QACA,CAAC,MAAO,WACR,EACA,UACA,EACA,UACA,EACA,UACA,EACA,UACA,SAGJC,UAAW,CACT,aAAc,YACd,aAAc,KAIlBG,SAAU,CACRN,IACE,uJACFK,YAAa,gCACbH,UAAW,CACT,aAAc,OAEhBC,UAAW,CACT,aAAc,YACd,aAAc,MCrDL,SAASI,EAAkBvC,EAAKwC,GAAgB,IAAD,EAChCC,mBAAS,IADuB,mBACrDC,EADqD,KAC7CC,EAD6C,KA8D5D,OA3DAC,qBAAU,WACR,GAAI5C,EAAI6C,QAAS,CACf,IAAIC,EAAY,GAChB9C,EAAI6C,QAAQE,GAAG,QAAQ,WACrBpC,QAAQC,IAAI,0BDoDC,CACjB,CACEoC,GAAI,KACJ7C,YAAa,sBACb6B,IACE,uFACFiB,QAAS,UACTC,QAAS,MAEX,CACEF,GAAI,KACJ7C,YAAa,mBACb6B,IACE,uFACFiB,QAAS,WACTC,QAAS,MAEX,CACEF,GAAI,KACJ7C,YAAa,mBACb6B,IACE,uFACFiB,QAAS,WACTC,QAAS,cAEX,CACEF,GAAI,KACJ7C,YAAa,0BACb6B,IACE,uFACFiB,QAAS,aACTC,QAAS,MAEX,CACEF,GAAI,KACJ7C,YAAa,yBACb6B,IACE,uFACFiB,QAAS,YACTC,QAAS,MAEX,CACEF,GAAI,aACJ7C,YAAa,0BACb6B,IACE,uFACFiB,QAAS,YACTC,QAAS,MAEX,CACEF,GAAI,KACJ7C,YAAa,2BACb6B,IACE,uFACFiB,QAAS,aACTC,QAAS,MAEX,CACEF,GAAI,KACJ7C,YAAa,yBACb6B,IACE,uFACFiB,QAAS,aACTC,QAAS,MAEX,CACEF,GAAI,MACJ7C,YAAa,+BACb6B,IACE,uFACFiB,QAAS,UACTC,QAAS,WAEX,CACEF,GAAI,MACJ7C,YAAa,gCACb6B,IACE,uFACFiB,QAAS,MACTC,QAAS,OAWKlD,KAAI,SAAAmD,GAAK,sBACtBA,EADsB,CAEzBhB,UAAW,CACT,aAAc,cC/IGiB,SAAQ,SAAAD,GACrB,IAAME,EAAU,UAAMF,EAAMH,GAAZ,WAEZM,EAAU,eAAOH,GACrBxC,QAAQC,IAAI,iBAAkByC,GAC9BC,EAAWC,OAASvD,EAAI6C,QAAQW,UAAUH,EAAY,CACpDI,KAAM,UACNrC,KAAK,GAAD,OAAKa,qBAAL,uBAA0CkB,EAAMH,GAAhD,cAGFG,EAAMjB,YACRoB,EAAWI,UAAY1D,EAAI6C,QAAQc,SACjC,CACEX,GAAG,GAAD,OAAKG,EAAMH,GAAX,SACFS,KAAM,OACNF,OAAQF,EACRO,MAAOT,EAAMjB,WAEf,mBAGAiB,EAAMhB,YACRmB,EAAWO,UAAY7D,EAAI6C,QAAQc,SACjC,CACEX,GAAG,GAAD,OAAKG,EAAMH,GAAX,SACFS,KAAM,OACNF,OAAQF,EACRO,MAAOT,EAAMhB,UACb2B,OAAQ,CACNC,WAAYvB,GAAiBW,EAAMH,GAAK,UAAY,SAGxD,mBAGJF,EAAUK,EAAMH,IAAMM,KAExBX,EAAUG,SAGb,CAAC9C,IAEJ4C,qBAAU,WACJ5C,EAAI6C,SACN/C,OAAOC,QAAQ2C,GAAQU,SAAQ,YAAkB,IAAD,mBAAfJ,EAAe,KAAXG,EAAW,KAC9CnD,EAAI6C,QAAQmB,kBAAZ,UACKb,EAAMH,GADX,SAEE,aACAA,GAAMR,EAAgB,UAAY,aAIvC,CAACxC,EAAKwC,IACFE,ECtDM,SAASuB,IACtB,IAAMC,EAASC,iBAAO,MADW,EAEe1B,mBAAS,MAFxB,mBAE1B9C,EAF0B,KAERyE,EAFQ,OAGa3B,mBAAS,MAHtB,mBAG1B4B,EAH0B,KAGTC,EAHS,OAIe7B,mBAAS,IAJxB,mBAIR8B,GAJQ,WAMjC3B,qBAAU,WACR4B,IAAKC,MAAM,wBAAyB,CAClCC,UAAU,EACVC,QAAQ,EACRC,SAAU,SAASC,GACjBN,EAAoBM,QAGvB,IAEH,IAAM7E,ECvBD,SAAgB8E,EAAhB,GAAwD,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,KAAMzF,EAAa,EAAbA,MAAO0F,EAAM,EAANA,IACtDC,IAASC,YAAcF,EACvB,IAAMjF,EAAMmE,iBAAO,MAUnB,OATAvB,qBAAU,WACR5C,EAAI6C,QAAU,IAAIqC,IAASE,IAAI,CAC7BC,UAAWP,EAAUjC,QACrBtD,MAAOA,EACP+F,OAAQP,EACRC,KAAMA,MAEP,CAACF,IAEG9E,EDWKuF,CAAOrB,EAAQ,CACzBa,OAAQ,EAAE,iBAAkB,mBAC5BC,KAAM,GACNzF,MAAO,mCACP0F,IACE,6GAYEO,GE1CD,SACLxF,EACAyF,EAFK,GAIJ,IADAzD,EACD,EADCA,IAAKE,EACN,EADMA,UAAWC,EACjB,EADiBA,UAAwBuD,GACzC,EAD4BrD,YAC5B,EADyCqD,SAEnChC,EAAYS,iBAAO,MACnBN,EAAYM,iBAAO,MACnBZ,EAASY,iBAAO,MAChBwB,EAAW,UAAMF,EAAN,WACjB7C,qBAAU,WACJ5C,EAAI6C,SACN7C,EAAI6C,QAAQE,GAAG,QAAQ,WACrBQ,EAAOV,QAAU7C,EAAI6C,QAAQW,UAAUmC,EAAa,CAClDlC,KAAM,UACNrC,KAAMY,IAGJE,IACFwB,EAAUb,QAAU7C,EAAI6C,QAAQc,SAC9B,CACEX,GAAG,GAAD,OAAKyC,EAAL,SACFhC,KAAM,OACNF,OAAQoC,EACR/B,MAAO1B,GAET,mBAGAC,IACF0B,EAAUhB,QAAU7C,EAAI6C,QAAQc,SAC9B,CACEX,GAAG,GAAD,OAAKyC,EAAL,SACFhC,KAAM,OACNF,OAAQoC,EACR/B,MAAOzB,GAET,mBAGJnC,EAAI6C,QAAQE,GAAG,QAAf,UAA2B0C,EAA3B,UAAwC,SAAAG,GACtCjF,QAAQC,IAAIgF,EAAEC,SAAS,IACnBH,GACFA,EAAQE,EAAEC,SAAS,YAK1B,CAAC7F,IFXiB8F,CAAgB9F,EAAK,MAAN,eAC/B+F,EAAOhE,aADwB,CAElC2D,QAAS,SAAAhF,GAAO,OAAI4D,EAAmB5D,OAIlB6B,EAAkBvC,EAAKL,IGzC9CiD,qBAAU,WACRoD,MAAM,GAAD,OAAI/D,qBAAJ,wBACFgE,MAAK,SAAA5F,GAAC,OAAIA,EAAE6F,UACZD,MAAK,SAAA5F,GAAC,OAAIM,QAAQC,IAAI,cAAeP,QACvC,IHwCH,OACE,yBAAKjB,UAAU,aACb,yBAAKA,UAAU,MAAM+G,IAAKjC,IAC1B,yBAAK9E,UAAU,WACb,kBAACqB,EAAD,CAASC,QAAS2D,IAAoB,KAExC,kBAAC9D,EAAD,CACEb,WAAY8F,EACZ7F,iBAAkBA,EAClBa,iBAAkB4D,K,MIzCXgC,MAVf,WACE,OACE,yBAAKhH,UAAU,OACb,kBAAC,IAAD,CAAQiH,SAAUpE,sBAChB,kBAAC,IAAD,CAAOqE,KAAK,IAAIC,UAAWtC,OCGfuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.ba0a9051.chunk.js","sourcesContent":["import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faCircle} from '@fortawesome/free-solid-svg-icons';\n\nexport default function ContactTypeLegend() {\n  return (\n    <section className=\"contact-type\">\n      <ul>\n        <li className=\"category-entry\">\n          <FontAwesomeIcon icon={faCircle} style={{color: '#C2A5CF'}} />{' '}\n          Internet First, English\n        </li>\n        <li className=\"category-entry\">\n          <FontAwesomeIcon icon={faCircle} style={{color: '#9970AB'}} />{' '}\n          Internet First, Bilingual\n        </li>\n        <li className=\"category-entry\">\n          <FontAwesomeIcon icon={faCircle} style={{color: '#A6DBA0'}} />{' '}\n          Internet Choice, English\n        </li>\n        <li className=\"category-entry\">\n          <FontAwesomeIcon icon={faCircle} style={{color: '#5AAE61'}} />{' '}\n          Internet Choice, Bilingual\n        </li>\n      </ul>\n    </section>\n  );\n}\n","import React from 'react';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\nexport default function BoundarySelector({\n  boundaries,\n  selectedBoundary,\n  onSelect,\n}) {\n  return (\n    <section className=\"boundary-selector\">\n      <h4>Boundaries</h4>\n\n      {boundaries && (\n        <Dropdown\n          options={Object.entries(boundaries).map(([id, layer]) => ({\n            value: id,\n            label: layer.datasetName,\n          }))}\n          onChange={a => onSelect(a.value)}\n          value={selectedBoundary}\n          placeholder=\"Select a boundary\"\n        />\n      )}\n    </section>\n  );\n}\n","import React from 'react';\nimport ContactTypeLegend from './ContactTypeLegend';\nimport BoundarySelector from './BoundarySelector';\n\nexport default function Legend({\n  selectedBoundary,\n  boundaries,\n  onSelectBoundary,\n}) {\n  return (\n    <div className=\"Legend\">\n      <section className=\"thematic-layer\">\n        <ContactTypeLegend />\n        <BoundarySelector\n          selectedBoundary={selectedBoundary}\n          onSelect={onSelectBoundary}\n          boundaries={boundaries}\n        />\n      </section>\n    </div>\n  );\n}\n","import React from 'react';\nimport {RadialChart} from 'react-vis';\n\nexport default function Details({feature}) {\n  console.log(feature);\n\n  const makeInternetData = feature => {\n    const cols = [\n      'NoInternet',\n      'Internet_NoSub',\n      'Internet',\n      'DialUpOnly',\n      'Broadband_Any',\n      'Cellular',\n      'CellularOnly',\n      'Broadband_CableFiberOpticDSL',\n      'Broadband_CableFiberOpticDSLOnly',\n      'Satellite',\n      'SatelliteOnly',\n      'OtherOnly',\n    ];\n    const data = cols.map(col => ({\n      angle: feature.properties[col],\n      label: col,\n    }));\n    console.log(data);\n    return data;\n  };\n\n  const makeLEP = feature => {\n    const cols = [\n      'LEPHHs',\n      'LEPspanHHs',\n      'LEPindoeurHHs',\n      'LEPapacHHs',\n      'LEPotherHHs',\n    ];\n    const data = cols.map(col => ({\n      angle: feature.properties[col],\n      label: col,\n    }));\n    return data;\n  };\n\n  return (\n    <div className=\"feature\">\n      {feature ? (\n        <React.Fragment>\n          <h2>Census Tract: {feature.properties.ct2010}</h2>\n          <div className=\"cards\">\n            <div className=\"card basic\">\n              <h3>Basic Info</h3>\n              <p>Population {feature.properties.TotPopACS17}</p>\n              <p>Mail return rate 2010 :{feature.properties.MRR2010}%</p>\n            </div>\n            <div className=\"card demographics\">\n              <h3>Demographics</h3>\n            </div>\n            <div className=\"card english_proficency\">\n              <h3>English Proficency</h3>\n              <RadialChart\n                width={200}\n                height={200}\n                data={makeLEP(feature)}\n                showLabels\n                labelsRadiusMultiplier={1.1}\n                labelsStyle={{\n                  fontSize: 12,\n                }}\n                innerRadius={80}\n                radius={100}\n              />\n            </div>\n            <div className=\"card internet\">\n              <h3>Internet</h3>\n              <RadialChart\n                width={200}\n                height={200}\n                data={makeInternetData(feature)}\n                showLabels\n                labelsRadiusMultiplier={1.1}\n                innerRadius={80}\n                radius={100}\n                labelsStyle={{\n                  fontSize: 12,\n                }}\n              />\n            </div>\n          </div>\n        </React.Fragment>\n      ) : (\n        <h2>Click to see details of feature</h2>\n      )}\n    </div>\n  );\n}\n","export default {\n  geojsonLayer: {\n    url: `${process.env.PUBLIC_URL}/CensusTractsAllVariables.geojson`,\n    paintFill: {\n      'fill-color': [\n        'match',\n        ['get', 'strategy_code'],\n        0,\n        '#C2A5CF',\n        1,\n        '#9970AB',\n        2,\n        '#A6DBA0',\n        3,\n        '#5AAE61',\n        'grey',\n      ],\n    },\n    paintLine: {\n      'line-color': 'lightgrey',\n    },\n  },\n  censusStrategyLayer: {\n    url:\n      'https://gis-server.data.census.gov/arcgis/rest/services/Hosted/Mail_Strategy_VectorTile/VectorTileServer/tile/{z}/{y}/{x}.pbf',\n    sourceLayer: 'Mail Strategy',\n    paintFill: {\n      'fill-color': [\n        'match',\n        ['get', '_symbol'],\n        0,\n        '#C2A5CF',\n        1,\n        '#9970AB',\n        2,\n        '#A6DBA0',\n        3,\n        '#5AAE61',\n        'grey',\n      ],\n    },\n    paintLine: {\n      'line-color': 'lightgrey',\n      'line-width': 0.2,\n    },\n  },\n\n  HTCLayer: {\n    url:\n      'https://b.tiles.mapbox.com/v4/cunycur.9zkm964v/{z}/{x}/{y}.vector.pbf?access_token=pk.eyJ1IjoiY3VueWN1ciIsImEiOiJfQmNSMF9NIn0.uRgbcFeJbw2xyTUZY8gYeA',\n    sourceLayer: 'Tract2017wgs84_HTConly-c1gvdq',\n    paintFill: {\n      'fill-color': 'red',\n    },\n    paintLine: {\n      'line-color': 'lightgrey',\n      'line-width': 0.2,\n    },\n  },\n};\n\nexport function BoundaryLayers() {\n  const layer_list = [\n    {\n      id: 'cd',\n      datasetName: 'Community Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/yfnk-k7r4?method=export&format=Shapefile',\n      nameCol: 'boro_cd',\n      nameAlt: null,\n    },\n    {\n      id: 'pp',\n      datasetName: 'Police Precincts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/78dh-3ptz?method=export&format=Shapefile',\n      nameCol: 'precinct',\n      nameAlt: null,\n    },\n    {\n      id: 'sd',\n      datasetName: 'School Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/r8nu-ymqj?method=export&format=Shapefile',\n      nameCol: 'district',\n      nameAlt: 'districtco',\n    },\n    {\n      id: 'hc',\n      datasetName: 'Health Center Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/b55q-34ps?method=export&format=Shapefile',\n      nameCol: 'hcent_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'cc',\n      datasetName: 'City Council Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/yusd-j4xi?method=export&format=Shapefile',\n      nameCol: 'coun_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'nycongress',\n      datasetName: 'Congressional Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/qd3c-zuu7?method=export&format=Shapefile',\n      nameCol: 'cong_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'sa',\n      datasetName: 'State Assembly Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/pf5b-73bw?method=export&format=Shapefile',\n      nameCol: 'assem_dist',\n      nameAlt: null,\n    },\n    {\n      id: 'ss',\n      datasetName: 'State Senate Districts',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/h4i2-acfi?method=export&format=Shapefile',\n      nameCol: 'st_sen_dis',\n      nameAlt: null,\n    },\n    {\n      id: 'nta',\n      datasetName: 'Neighborhood Tabulation Area',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/cpf4-rkhq?method=export&format=Shapefile',\n      nameCol: 'ntaname',\n      nameAlt: 'ntacode',\n    },\n    {\n      id: 'bid',\n      datasetName: 'Business Improvement District',\n      url:\n        'http://data.cityofnewyork.us/api/geospatial/ejxk-d93y?method=export&format=Shapefile',\n      nameCol: 'bid',\n      nameAlt: null,\n    },\n    /*{\n      id: 'zipcode',\n      datasetName: 'Zip Code',\n      url: 'http://data.cityofnewyork.us/download/i8iw-xf4u/application%2Fzip',\n      nameCol: 'ZIPCODE',\n      nameAlt: null,\n},*/\n  ];\n\n  return layer_list.map(layer => ({\n    ...layer,\n    paintLine: {\n      'line-color': 'black',\n    },\n  }));\n}\n","import React, {useEffect, useState, useRef} from 'react';\nimport {BoundaryLayers} from '../Layers';\n\nexport default function useBoundaryLayers(map, selectedLayer) {\n  const [layers, setLayers] = useState({});\n\n  useEffect(() => {\n    if (map.current) {\n      let layerList = {};\n      map.current.on('load', () => {\n        console.log('adding boundary layers');\n        const boundaryLayers = BoundaryLayers();\n        boundaryLayers.forEach(layer => {\n          const sourceName = `${layer.id}_source`;\n\n          let layerDeets = {...layer};\n          console.log('adding source ', sourceName);\n          layerDeets.source = map.current.addSource(sourceName, {\n            type: 'geojson',\n            data: `${process.env.PUBLIC_URL}/boundaries/${layer.id}.geojson`,\n          });\n\n          if (layer.paintFill) {\n            layerDeets.fillLayer = map.current.addLayer(\n              {\n                id: `${layer.id}-fill`,\n                type: 'fill',\n                source: sourceName,\n                paint: layer.paintFill,\n              },\n              'waterway-label',\n            );\n          }\n          if (layer.paintLine) {\n            layerDeets.lineLayer = map.current.addLayer(\n              {\n                id: `${layer.id}-line`,\n                type: 'line',\n                source: sourceName,\n                paint: layer.paintLine,\n                layout: {\n                  visibility: selectedLayer == layer.id ? 'visible' : 'none',\n                },\n              },\n              'waterway-label',\n            );\n          }\n          layerList[layer.id] = layerDeets;\n        });\n        setLayers(layerList);\n      });\n    }\n  }, [map]);\n\n  useEffect(() => {\n    if (map.current) {\n      Object.entries(layers).forEach(([id, layer]) => {\n        map.current.setLayoutProperty(\n          `${layer.id}-line`,\n          'visibility',\n          id == selectedLayer ? 'visible' : 'none',\n        );\n      });\n    }\n  }, [map, selectedLayer]);\n  return layers;\n}\n","import React, {useRef, useState, useEffect} from 'react';\nimport {useMap} from '../hooks/useMap';\nimport Legend from '../components/Legend';\nimport Details from '../components/Details';\nimport Papa from 'papaparse';\nimport {useMVTLayer} from '../hooks/useMVTLayer';\nimport {useGeoJSONLayer} from '../hooks/useGeoJSONLayer';\nimport useBoundaryLayers from '../hooks/useBoundaryLayers';\nimport useFacilities from '../hooks/useFacilities';\nimport Layers from '../Layers';\n\nexport default function MainPage() {\n  const mapDiv = useRef(null);\n  const [selectedBoundary, setSelectedBoundary] = useState('cd');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [hardToCountStats, setHardToCountStats] = useState([]);\n\n  useEffect(() => {\n    Papa.parse('/hard_to_count_NY.csv', {\n      download: true,\n      header: true,\n      complete: function(results) {\n        setHardToCountStats(results);\n      },\n    });\n  }, []);\n\n  const map = useMap(mapDiv, {\n    lnglat: [-73.9920330193022, 40.75078660435196],\n    zoom: 10,\n    style: 'mapbox://styles/mapbox/light-v10',\n    key:\n      'pk.eyJ1Ijoic3R1YXJ0LWx5bm4iLCJhIjoiM2Q4ODllNmRkZDQ4Yzc3NTBhN2UyNDE0MWY2OTRiZWIifQ.8OEKvgZBCCtDFUXkjt66Pw',\n  });\n\n  //  const stategyLayer = useMVTLayer(map, Layers.censusStrategyLayer);\n\n  //  const HTCLayer = useMVTLayer(map, Layers.HTCLayer);\n  const GeojsonLayer = useGeoJSONLayer(map, 'HTC', {\n    ...Layers.geojsonLayer,\n    onClick: feature => setSelectedFeature(feature),\n  });\n\n  // BoundaryLayers().forEach(layer => {\n  const boundaryLayers = useBoundaryLayers(map, selectedBoundary);\n\n  const facilities = useFacilities();\n  return (\n    <div className=\"main-page\">\n      <div className=\"map\" ref={mapDiv} />\n      <div className=\"details\">\n        <Details feature={selectedFeature} />{' '}\n      </div>\n      <Legend\n        boundaries={boundaryLayers}\n        selectedBoundary={selectedBoundary}\n        onSelectBoundary={setSelectedBoundary}\n      />\n    </div>\n  );\n}\n","import {useState, useRef, useEffect, useCallback} from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nexport function useMap(mapDivRef, {lnglat, zoom, style, key}) {\n  mapboxgl.accessToken = key;\n  const map = useRef(null);\n  useEffect(() => {\n    map.current = new mapboxgl.Map({\n      container: mapDivRef.current, // container id\n      style: style, // stylesheet location\n      center: lnglat, // starting position [lng, lat]\n      zoom: zoom, // starting zoom\n    });\n  }, [mapDivRef]);\n\n  return map;\n}\n","import {useEffect, useRef} from 'react';\n\nexport function useGeoJSONLayer(\n  map,\n  name,\n  {url, paintFill, paintLine, sourceLayer, onClick},\n) {\n  const fillLayer = useRef(null);\n  const lineLayer = useRef(null);\n  const source = useRef(null);\n  const source_name = `${name}_source`;\n  useEffect(() => {\n    if (map.current) {\n      map.current.on('load', () => {\n        source.current = map.current.addSource(source_name, {\n          type: 'geojson',\n          data: url,\n        });\n\n        if (paintFill) {\n          fillLayer.current = map.current.addLayer(\n            {\n              id: `${name}-fill`,\n              type: 'fill',\n              source: source_name,\n              paint: paintFill,\n            },\n            'waterway-label',\n          );\n        }\n        if (paintLine) {\n          lineLayer.current = map.current.addLayer(\n            {\n              id: `${name}-line`,\n              type: 'line',\n              source: source_name,\n              paint: paintLine,\n            },\n            'waterway-label',\n          );\n        }\n        map.current.on('click', `${name}-fill`, e => {\n          console.log(e.features[0]);\n          if (onClick) {\n            onClick(e.features[0]);\n          }\n        });\n      });\n    }\n  }, [map]);\n  return {fillLayer, source};\n}\n","import React, {useEffect, useState} from 'react';\n\nexport default function useFacilities() {\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/facilities.geojson`)\n      .then(a => a.json())\n      .then(a => console.log('facilities ', a));\n  }, []);\n}\n","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport MainPage from './pages/MainPage';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Route path=\"/\" component={MainPage} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}